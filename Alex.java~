/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package lexic;
import static lexic.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>SparqlFlex.flex</tt>
 */
class Alex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_STATE = 2;
  public static final int TYPE_SYM = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\30\1\13\1\14\1\14\1\13\22\2\1\27\1\41\1\23"+
    "\1\0\1\6\1\0\1\36\1\21\1\25\1\26\1\42\1\17\1\46"+
    "\1\11\1\16\1\43\12\12\1\4\1\33\1\1\1\40\1\3\1\5"+
    "\1\7\1\50\1\76\1\57\1\70\1\20\1\64\1\53\1\60\1\72"+
    "\1\10\1\101\1\47\1\54\1\52\1\67\1\75\1\10\1\66\1\61"+
    "\1\56\1\71\1\10\1\100\1\77\1\74\1\10\1\31\1\22\1\32"+
    "\1\35\1\33\1\34\1\50\1\24\1\57\1\70\1\20\1\63\1\53"+
    "\1\60\1\72\1\10\1\101\1\47\1\54\1\51\1\67\1\75\1\10"+
    "\1\65\1\61\1\55\1\71\1\10\1\100\1\77\1\74\1\10\1\44"+
    "\1\37\1\45\7\33\1\15\61\33\1\33\10\33\27\33\1\33\37\33"+
    "\1\33\70\33\2\73\115\33\1\62\u0180\33\160\33\16\33\1\33\u1c81\33"+
    "\14\33\2\33\32\33\1\15\1\15\25\33\2\33\57\33\272\33\1\102"+
    "\145\33\u0a70\33\u03f0\33\21\33\ua7ff\33\u1800\33\u0900\0\u04d0\33\40\0\u020e\33"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\4\1\1\5\1\6"+
    "\1\7\1\0\1\10\1\11\3\1\1\12\1\13\1\7"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\1\1\25\14\1\1\0\1\26\1\0"+
    "\1\27\1\4\1\0\1\26\1\0\1\30\1\4\1\26"+
    "\1\0\1\31\1\32\1\4\1\26\1\33\1\26\1\34"+
    "\1\26\1\35\1\0\1\26\1\0\4\26\1\0\1\26"+
    "\2\0\1\26\1\36\2\0\1\26\1\0\1\37\3\0"+
    "\1\40\1\0\1\41\1\42\1\43\1\44\27\0\1\45"+
    "\2\27\1\4\1\32\2\0\3\46\1\26\4\0\3\47"+
    "\1\36\1\0\2\37\2\0\1\41\2\0\1\50\5\0"+
    "\1\51\22\0\1\35\2\0\2\52\7\0\1\37\1\53"+
    "\1\0\1\54\2\0\1\55\4\0\1\56\17\0\1\57"+
    "\1\60\3\0\1\37\1\61\1\0\1\62\1\63\3\0"+
    "\1\64\2\0\1\65\7\0\1\66\1\0\1\67\1\70"+
    "\1\0\1\71\1\72\3\0\1\73\2\0\1\74\1\0"+
    "\1\75\6\0\1\76\1\77\4\0\1\100\10\0\1\101"+
    "\1\0\1\102\1\103\1\104\1\105\1\106\2\0\1\107"+
    "\1\0\1\110\1\0\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\206\0\u053c\0\u057f\0\u025b"+
    "\0\u05c2\0\u0605\0\u025b\0\u0648\0\206\0\206\0\u025b\0\u025b"+
    "\0\206\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\206\0\u0a78\0\u0367\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0afe"+
    "\0\u0bc7\0\u025b\0\u0c0a\0\u0367\0\u0c4d\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0192\0\u0d16\0\u01d5\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u014f"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u0367\0\u12d8\0\u0367\0\u12d8\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u12d8\0\u12d8"+
    "\0\u0c4d\0\u1963\0\u1963\0\u19a6\0\u19e9\0\u0d9c\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u0f2e\0\u1c01\0\u1c44"+
    "\0\u12d8\0\u1c87\0\u1103\0\u1cca\0\u1d0d\0\u1d50\0\u12d8\0\u1d93"+
    "\0\u1dd6\0\u0367\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u0367"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355"+
    "\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u1b38\0\u1b7b\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u1cca\0\u25f3\0\u2636\0\u2679\0\u0367"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u0367\0\u27c8\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e"+
    "\0\u2cc1\0\u24a4\0\u252a\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u0367"+
    "\0\u2e10\0\u0367\0\u0367\0\u2e53\0\u2e96\0\u2ed9\0\u0367\0\u2f1c"+
    "\0\u2f5f\0\u0367\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u3134\0\u0367\0\u3177\0\u0367\0\u0367\0\u31ba\0\u0367\0\u12d8"+
    "\0\u31fd\0\u3240\0\u3283\0\u0367\0\u32c6\0\u3309\0\u0367\0\u334c"+
    "\0\u0367\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u0367"+
    "\0\u12d8\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u0367\0\u362d\0\u3670"+
    "\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u0367\0\u3845"+
    "\0\u12d8\0\u0367\0\u0367\0\u0367\0\u0367\0\u3888\0\u38cb\0\u0367"+
    "\0\u390e\0\u0367\0\u3951\0\u12d8\0\u0367";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\12\1\21\1\12\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\30\3\12\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\12\1\44"+
    "\1\12\2\45\1\46\1\12\2\47\2\50\2\51\1\52"+
    "\1\53\1\54\2\55\1\12\1\56\1\23\1\12\1\57"+
    "\2\12\35\0\1\60\57\0\1\61\70\0\1\62\1\16"+
    "\1\0\1\63\1\64\1\65\1\62\3\65\1\66\2\0"+
    "\1\65\1\67\1\62\1\65\1\62\1\16\1\0\1\65"+
    "\2\62\2\0\3\65\2\16\1\62\1\16\1\70\3\62"+
    "\2\16\1\62\34\65\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\3\16\1\72\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\1\16\1\74\3\0\2\16\1\0\34\16\1\0\1\75"+
    "\1\0\1\75\1\76\1\75\1\0\2\75\1\16\1\77"+
    "\2\0\1\75\1\73\1\0\1\75\1\0\1\75\1\0"+
    "\1\75\4\0\5\75\1\0\2\75\3\0\2\75\1\0"+
    "\34\75\1\0\1\100\1\0\1\100\1\71\1\100\1\0"+
    "\2\100\1\16\1\101\2\0\1\100\1\73\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\4\0\5\100\1\0\2\100"+
    "\3\0\2\100\1\0\34\100\1\0\1\102\1\0\3\102"+
    "\1\0\2\102\1\0\1\103\2\0\1\102\2\0\1\102"+
    "\1\0\1\102\1\0\1\102\4\0\5\102\1\0\2\102"+
    "\3\0\2\102\1\0\34\102\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\1\16\1\104\1\16\1\72\2\0"+
    "\1\16\1\73\1\0\1\104\1\0\1\16\1\0\1\104"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\13\104"+
    "\1\16\10\104\1\16\6\104\1\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\3\16\1\72\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\34\16\12\105"+
    "\1\106\3\0\1\107\64\105\1\61\1\72\1\61\1\72"+
    "\1\110\1\72\1\61\3\72\1\14\2\0\1\16\1\111"+
    "\1\61\1\112\1\61\1\72\1\61\1\72\4\61\5\72"+
    "\1\61\2\72\3\61\2\72\1\61\34\72\13\0\1\15"+
    "\13\0\2\15\53\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\34\16\12\0\1\113\70\0\12\114\1\115"+
    "\3\0\1\116\64\114\12\117\1\120\1\0\5\117\1\121"+
    "\1\122\60\117\12\123\1\124\1\0\5\123\1\0\1\125"+
    "\1\126\57\123\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\3\16\1\72\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\1\16\1\127\16\16\1\130\13\16"+
    "\12\0\1\61\1\131\12\0\1\132\2\131\64\0\1\61"+
    "\1\15\13\0\2\15\53\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\3\16\1\72\1\133\1\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\2\0\2\133"+
    "\1\16\1\134\3\16\1\0\2\16\3\0\2\16\1\0"+
    "\34\16\12\0\1\61\23\0\1\135\45\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\3\16\1\72\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\1\136\1\16\3\0\2\16\1\0\34\16"+
    "\12\0\1\61\25\0\1\137\43\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\3\16\1\72\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\1\16\1\140\21\16"+
    "\2\141\7\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\3\16\1\72\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\12\16\2\142\20\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\3\16\1\72\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\16\16"+
    "\2\143\14\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\3\16\1\72\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\16\16\2\144\14\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\3\16\1\72\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\20\16"+
    "\1\145\13\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\3\16\1\72\2\0\1\16\1\73\1\0\1\146"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\1\16\1\147\4\16\2\150\24\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\3\16"+
    "\1\72\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\1\16\1\151\14\16\2\152\3\16\2\153\7\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\3\16"+
    "\1\72\2\0\1\16\1\73\1\0\1\154\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\34\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\3\16\1\72\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\14\16\2\155\2\156\6\16\1\157"+
    "\5\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\3\16\1\72\2\0\1\16\1\73\1\0\1\160\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\1\16\1\161\21\16\2\162\7\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\3\16\1\72"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\2\16\2\163\30\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\3\16\1\72\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\12\16\2\164\20\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\3\16\1\72"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\16\16\2\165\14\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\3\16\1\72\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\11\16\1\166\22\16\35\0"+
    "\1\167\45\0\1\62\2\0\1\170\7\62\2\0\5\62"+
    "\2\0\3\62\2\0\3\62\2\0\1\62\1\0\4\62"+
    "\2\0\36\62\1\75\1\0\1\171\1\172\1\173\1\62"+
    "\2\173\1\65\1\173\2\0\1\173\1\67\1\62\1\173"+
    "\1\62\1\75\1\0\1\173\2\62\2\0\3\173\2\75"+
    "\1\62\1\75\1\173\3\62\2\75\1\62\34\173\1\62"+
    "\1\16\1\0\1\63\1\64\1\65\1\62\4\65\2\0"+
    "\1\65\1\67\1\62\1\65\1\62\1\16\1\0\1\65"+
    "\2\62\2\0\3\65\2\16\1\62\1\16\1\65\3\62"+
    "\2\16\1\62\34\65\1\62\1\16\1\0\1\63\1\64"+
    "\1\65\1\62\3\65\1\66\2\0\1\65\1\67\1\62"+
    "\1\65\1\62\1\16\1\0\1\65\2\62\2\0\3\65"+
    "\2\16\1\62\1\16\1\65\3\62\2\16\1\62\34\65"+
    "\1\62\1\16\1\0\1\63\2\65\1\62\4\65\2\0"+
    "\1\65\1\67\1\62\1\65\1\62\1\16\1\0\1\65"+
    "\2\62\2\0\3\65\2\16\1\62\1\16\1\65\3\62"+
    "\2\16\1\62\34\65\1\0\1\75\1\0\1\75\1\76"+
    "\1\75\1\0\2\75\1\16\1\75\2\0\1\75\1\73"+
    "\1\0\1\75\1\0\1\75\1\0\1\75\4\0\5\75"+
    "\1\0\2\75\3\0\2\75\1\0\34\75\1\0\1\16"+
    "\1\0\3\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\34\16\1\0\1\75\1\0"+
    "\1\75\1\76\1\75\1\0\4\75\2\0\1\75\1\174"+
    "\1\0\1\75\1\0\1\75\1\0\1\75\4\0\5\75"+
    "\1\0\2\75\3\0\2\75\1\0\34\75\1\0\1\75"+
    "\1\0\1\75\1\76\1\75\1\0\3\75\1\77\2\0"+
    "\1\75\1\174\1\0\1\75\1\0\1\75\1\0\1\75"+
    "\4\0\5\75\1\0\2\75\3\0\2\75\1\0\34\75"+
    "\1\0\1\100\1\0\1\100\1\71\1\100\1\0\2\100"+
    "\1\16\1\100\2\0\1\100\1\73\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\4\0\5\100\1\0\2\100\3\0"+
    "\2\100\1\0\34\100\1\0\1\102\1\0\3\102\1\0"+
    "\2\102\1\0\1\102\2\0\1\102\2\0\1\102\1\0"+
    "\1\102\1\0\1\102\4\0\5\102\1\0\2\102\3\0"+
    "\2\102\1\0\34\102\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\1\16\1\104\1\175\1\16\2\0\1\16"+
    "\1\73\1\0\1\104\1\0\1\16\1\0\1\104\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\13\104\1\16"+
    "\10\104\1\16\6\104\1\16\12\0\1\176\70\0\12\176"+
    "\1\106\3\0\1\177\1\176\1\200\62\176\12\0\1\177"+
    "\71\0\1\16\1\0\3\16\1\0\3\16\1\201\2\0"+
    "\1\16\1\73\1\0\1\202\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\34\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\2\16"+
    "\1\203\1\72\2\0\1\16\1\73\1\204\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\34\16\12\0\1\113\5\0\1\205\74\0"+
    "\1\206\70\0\12\206\1\115\3\0\1\207\1\206\1\210"+
    "\62\206\12\0\1\207\70\0\13\117\1\0\5\117\1\211"+
    "\1\122\72\117\1\120\1\0\5\117\1\211\1\122\60\117"+
    "\21\0\1\212\102\0\1\117\1\0\2\117\24\0\1\117"+
    "\3\0\1\117\5\0\1\117\1\0\1\117\15\0\13\123"+
    "\1\0\5\123\1\0\1\125\1\213\71\123\1\124\1\0"+
    "\5\123\1\0\1\125\1\213\57\123\21\0\1\123\1\0"+
    "\2\123\24\0\1\123\3\0\1\123\5\0\1\123\1\0"+
    "\1\123\15\0\13\123\1\0\5\123\1\0\1\125\1\214"+
    "\57\123\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\12\16\2\215\20\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\22\16\1\216\11\16\13\0"+
    "\1\131\12\0\1\132\2\131\170\0\1\133\13\0\2\133"+
    "\1\0\1\217\51\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\2\16\2\220\30\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\5\16\1\221\26\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\32\16\2\222\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\1\16\1\223\32\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\22\16\1\224\11\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\2\16\2\225\30\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\1\226\33\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\5\16\1\227\26\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\16\16\2\230\14\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\1\231\33\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\20\16\1\232\13\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\1\233\33\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\4\16\1\234\14\16\1\235\12\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\14\16"+
    "\2\236\16\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\21\16\1\237\12\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\6\16\2\240\24\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\12\16\2\241\20\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\6\16\2\242\24\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\12\16\2\243"+
    "\20\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\23\16\2\244\7\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\1\245\21\16\1\246\2\247"+
    "\7\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\250\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\34\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\251\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\34\16\1\62\1\75\1\0\1\171\1\172"+
    "\1\173\1\62\4\173\2\0\1\173\1\252\1\62\1\173"+
    "\1\62\1\75\1\0\1\173\2\62\2\0\3\173\2\75"+
    "\1\62\1\75\1\173\3\62\2\75\1\62\34\173\1\0"+
    "\1\75\1\0\3\75\1\0\4\75\2\0\1\75\1\174"+
    "\1\0\1\75\1\0\1\75\1\0\1\75\4\0\5\75"+
    "\1\0\2\75\3\0\2\75\1\0\34\75\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\1\16\1\253\1\16"+
    "\1\253\2\0\1\16\1\73\1\0\1\253\1\0\1\16"+
    "\1\0\1\253\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\13\253\1\16\10\253\1\16\6\253\1\16\12\0"+
    "\1\177\5\0\1\254\73\0\1\255\1\176\4\0\1\255"+
    "\64\0\1\16\1\0\1\16\1\71\1\16\1\0\3\16"+
    "\1\201\2\0\1\16\1\73\1\0\1\202\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\34\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\2\16\1\203\1\256\2\0\1\16\1\73\1\204"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\34\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\3\16\1\256\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\34\16\12\0"+
    "\1\257\101\0\1\204\1\257\4\0\1\204\75\0\1\207"+
    "\5\0\1\260\73\0\1\261\1\206\4\0\1\261\63\0"+
    "\21\212\1\262\1\263\60\212\13\264\1\265\5\264\1\265"+
    "\1\266\1\267\57\264\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\270"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\34\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\2\16\2\271\30\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\4\16"+
    "\1\272\27\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\23\16\2\273\7\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\26\16\1\274\5\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\275\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\34\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\12\16\2\276\20\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\277\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\34\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\300\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\34\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\12\16\2\301"+
    "\20\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\5\16\1\302\26\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\6\16\2\303\24\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\304\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\34\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\22\16\1\305\11\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\12\16\2\306\20\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\307\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\34\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\23\16"+
    "\2\310\7\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\10\16\1\311\23\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\1\16\1\312\32\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\6\16\2\313\24\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\20\16\1\314\13\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\23\16\2\315"+
    "\7\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\16\16\2\316\14\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\16\16\2\317\14\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\14\16"+
    "\2\320\16\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\16\16\2\321\14\16\1\62\1\75\1\0"+
    "\1\171\2\173\1\62\4\173\2\0\1\173\1\252\1\62"+
    "\1\173\1\62\1\75\1\0\1\173\2\62\2\0\3\173"+
    "\2\75\1\62\1\75\1\173\3\62\2\75\1\62\34\173"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\1\16"+
    "\1\253\1\175\1\253\2\0\1\16\1\73\1\0\1\253"+
    "\1\0\1\16\1\0\1\253\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\13\253\1\16\10\253\1\16\6\253"+
    "\1\16\11\0\1\255\1\322\4\0\1\255\75\0\1\322"+
    "\101\0\1\261\1\323\4\0\1\261\75\0\1\323\70\0"+
    "\21\212\1\324\1\263\60\212\21\0\1\212\1\0\2\212"+
    "\24\0\1\212\3\0\1\212\5\0\1\212\1\0\1\212"+
    "\15\0\22\265\1\325\1\326\57\265\21\0\1\264\1\0"+
    "\2\264\24\0\1\264\3\0\1\264\5\0\1\264\1\0"+
    "\1\264\15\0\13\264\1\265\5\264\1\265\1\266\1\327"+
    "\57\264\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\21\16\1\330\12\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\5\16\1\331\26\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\6\16"+
    "\2\332\24\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\11\16\1\333\22\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\6\16\2\334\24\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\10\16\1\335\23\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\6\16\2\336\24\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\337\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\34\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\2\0\1\340\1\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\34\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\341\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\34\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\30\16\1\342\3\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\10\16\1\343"+
    "\23\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\344\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\34\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\16\16\2\345\14\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\20\16\1\346\13\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\16\16\2\347\14\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\6\16\2\350\24\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\23\16\2\351"+
    "\7\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\2\16\2\352\30\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\6\16\2\353\24\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\23\16"+
    "\2\354\7\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\23\16\2\355\7\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\23\16\2\356\7\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\357\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\34\16\21\212\1\360\1\263\60\212\21\0\1\265\1\0"+
    "\2\265\24\0\1\265\3\0\1\265\5\0\1\265\1\0"+
    "\1\265\15\0\22\265\1\325\1\361\57\265\13\264\1\265"+
    "\5\264\1\265\1\266\1\213\57\264\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\1\16\1\362\32\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\16\16\2\363\14\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\6\16\2\364\24\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\365\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\34\16\51\0"+
    "\2\366\31\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\16\16\2\367\14\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\370\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\34\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\6\16\2\371\24\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\2\0\1\372\1\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\34\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\2\16\2\373\30\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\23\16\2\374"+
    "\7\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\25\16\1\375\6\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\2\16\2\376\30\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\377\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\34\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\30\16\1\u0100\3\16\22\265\1\325\1\u0101\57\265\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\6\16"+
    "\2\u0102\24\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\22\16\1\u0103\11\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\16\16\2\u0104\14\16"+
    "\50\0\1\u0105\33\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\21\16\1\u0106\12\16\24\0\1\u0107\51\0"+
    "\1\u0107\5\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\1\16\1\u0108\32\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\u0109\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\27\16\1\u0109\4\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\26\16"+
    "\1\u010a\5\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\10\16\1\u010b\23\16\1\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\16\16\2\u010c\14\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\16\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\10\16\1\u010d\23\16\1\0\1\16\1\0\1\16\1\71"+
    "\1\16\1\0\4\16\2\0\1\16\1\73\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\4\0\5\16\1\0\2\16"+
    "\3\0\2\16\1\0\10\16\1\u010e\23\16\1\0\1\16"+
    "\1\0\1\16\1\71\1\16\1\0\4\16\2\0\1\16"+
    "\1\73\1\0\1\16\1\0\1\16\1\0\1\16\4\0"+
    "\5\16\1\0\2\16\3\0\2\16\1\0\5\16\1\u010f"+
    "\26\16\54\0\1\u0110\122\0\1\u0111\7\0\1\16\1\0"+
    "\1\16\1\71\1\16\1\0\4\16\2\0\1\16\1\73"+
    "\1\0\1\16\1\0\1\16\1\0\1\16\4\0\5\16"+
    "\1\0\2\16\3\0\2\16\1\0\1\u0112\33\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\u0113\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\34\16"+
    "\1\0\1\16\1\0\1\16\1\71\1\16\1\0\4\16"+
    "\2\0\1\16\1\73\1\0\1\u0114\1\0\1\16\1\0"+
    "\1\16\4\0\5\16\1\0\2\16\3\0\2\16\1\0"+
    "\34\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\6\16\2\u0115\24\16\1\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\1\16\1\u0116\32\16\1\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\11\16"+
    "\1\u0117\22\16\1\0\1\16\1\0\1\16\1\71\1\16"+
    "\1\0\4\16\2\0\1\16\1\73\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\4\0\5\16\1\0\2\16\3\0"+
    "\2\16\1\0\6\16\2\u0118\24\16\20\0\1\u0119\63\0"+
    "\1\16\1\0\1\16\1\71\1\16\1\0\4\16\2\0"+
    "\1\16\1\73\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\4\0\5\16\1\0\2\16\3\0\2\16\1\0\1\u011a"+
    "\33\16\1\0\1\16\1\0\1\16\1\71\1\16\1\0"+
    "\4\16\2\0\1\16\1\73\1\0\1\u011b\1\0\1\16"+
    "\1\0\1\16\4\0\5\16\1\0\2\16\3\0\2\16"+
    "\1\0\34\16\70\0\1\u011c\13\0\1\16\1\0\1\16"+
    "\1\71\1\16\1\0\4\16\2\0\1\16\1\73\1\0"+
    "\1\16\1\0\1\16\1\0\1\16\4\0\5\16\1\0"+
    "\2\16\3\0\2\16\1\0\12\16\2\u011d\20\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\13\1\1\0\41\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\11\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\1\2\0\2\1\2\0\1\1"+
    "\1\0\1\1\3\0\1\11\1\0\1\1\1\11\1\1"+
    "\1\11\27\0\2\11\3\1\2\0\4\1\4\0\3\1"+
    "\1\11\1\0\2\1\2\0\1\11\2\0\1\1\5\0"+
    "\1\1\22\0\1\1\2\0\2\1\7\0\2\1\1\0"+
    "\1\1\2\0\1\1\4\0\1\1\17\0\2\1\3\0"+
    "\2\1\1\0\2\1\3\0\1\1\2\0\1\1\7\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\11\3\0\1\1"+
    "\2\0\1\1\1\0\1\1\6\0\1\1\1\11\4\0"+
    "\1\1\10\0\1\1\1\0\1\11\4\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public StringBuffer lexeme = new StringBuffer();;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(Token.ERROR, yytext());
          }
        case 75: break;
        case 2: 
          { return new Symbol(Token.LESS);
          }
        case 76: break;
        case 3: 
          { return new Symbol(Token.GREATER);
          }
        case 77: break;
        case 4: 
          { yybegin(YYINITIAL);return new Symbol(Token.PNAME_NS, yytext());
          }
        case 78: break;
        case 5: 
          { return new Symbol(Token.SUB);
          }
        case 79: break;
        case 6: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER, yytext());
          }
        case 80: break;
        case 7: 
          { 
          }
        case 81: break;
        case 8: 
          { return new Symbol(Token.PERIOD);
          }
        case 82: break;
        case 9: 
          { return new Symbol(Token.PLUS);
          }
        case 83: break;
        case 10: 
          { return new Symbol(Token.LEFT_PARENTH);
          }
        case 84: break;
        case 11: 
          { return new Symbol(Token.RIGTH_PARENTH);
          }
        case 85: break;
        case 12: 
          { return new Symbol(Token.LEFT_CLASP);
          }
        case 86: break;
        case 13: 
          { return new Symbol(Token.RIGHT_CLASP);
          }
        case 87: break;
        case 14: 
          { return new Symbol(Token.EQUAL);
          }
        case 88: break;
        case 15: 
          { return new Symbol(Token.NOT);
          }
        case 89: break;
        case 16: 
          { return new Symbol(Token.MULT);
          }
        case 90: break;
        case 17: 
          { return new Symbol(Token.DIV);
          }
        case 91: break;
        case 18: 
          { return new Symbol(Token.LEFT_BRACE);
          }
        case 92: break;
        case 19: 
          { return new Symbol(Token.RIGHT_BRACE);
          }
        case 93: break;
        case 20: 
          { return new Symbol(Token.COMMA);
          }
        case 94: break;
        case 21: 
          { return new Symbol(Token.A);
          }
        case 95: break;
        case 22: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL, yytext());
          }
        case 96: break;
        case 23: 
          { return new Symbol(Token.IRI_REF, yytext());
          }
        case 97: break;
        case 24: 
          { return new Symbol(Token.LT);
          }
        case 98: break;
        case 25: 
          { return new Symbol(Token.GT);
          }
        case 99: break;
        case 26: 
          { yybegin(YYINITIAL);return new Symbol(Token.PNAME_LN, yytext());
          }
        case 100: break;
        case 27: 
          { return new Symbol(Token.VAR1, yytext());
          }
        case 101: break;
        case 28: 
          { return new Symbol(Token.VAR2, yytext());
          }
        case 102: break;
        case 29: 
          { return new Symbol(Token.LANGTAG, yytext());
          }
        case 103: break;
        case 30: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL1, yytext());
          }
        case 104: break;
        case 31: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL2, yytext());
          }
        case 105: break;
        case 32: 
          { return new Symbol(Token.NIL, yytext());
          }
        case 106: break;
        case 33: 
          { return new Symbol(Token.ANON, yytext());
          }
        case 107: break;
        case 34: 
          { return new Symbol(Token.AND);
          }
        case 108: break;
        case 35: 
          { return new Symbol(Token.OR);
          }
        case 109: break;
        case 36: 
          { return new Symbol(Token.NOT_EQUAL);
          }
        case 110: break;
        case 37: 
          { yybegin(YYINITIAL);return new Symbol(Token.TYPE, yytext());
          }
        case 111: break;
        case 38: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_NEGATIVE, yytext());
          }
        case 112: break;
        case 39: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_POSITIVE, yytext());
          }
        case 113: break;
        case 40: 
          { return new Symbol(Token.ASK);
          }
        case 114: break;
        case 41: 
          { return new Symbol(Token.STR);
          }
        case 115: break;
        case 42: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE, yytext());
          }
        case 116: break;
        case 43: 
          { return new Symbol(Token.BASE);
          }
        case 117: break;
        case 44: 
          { return new Symbol(Token.LANG);
          }
        case 118: break;
        case 45: 
          { return new Symbol(Token.TRUE);
          }
        case 119: break;
        case 46: 
          { return new Symbol(Token.FROM);
          }
        case 120: break;
        case 47: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_NEGATIVE, yytext());
          }
        case 121: break;
        case 48: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_POSITIVE, yytext());
          }
        case 122: break;
        case 49: 
          { return new Symbol(Token.BOUND);
          }
        case 123: break;
        case 50: 
          { return new Symbol(Token.LIMIT);
          }
        case 124: break;
        case 51: 
          { return new Symbol(Token.GRAPH);
          }
        case 125: break;
        case 52: 
          { return new Symbol(Token.FALSE);
          }
        case 126: break;
        case 53: 
          { return new Symbol(Token.REGEX);
          }
        case 127: break;
        case 54: 
          { return new Symbol(Token.UNION);
          }
        case 128: break;
        case 55: 
          { return new Symbol(Token.ISURI);
          }
        case 129: break;
        case 56: 
          { return new Symbol(Token.ISIRI);
          }
        case 130: break;
        case 57: 
          { return new Symbol(Token.WHERE);
          }
        case 131: break;
        case 58: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG1, yytext());
          }
        case 132: break;
        case 59: 
          { return new Symbol(Token.SELECT);
          }
        case 133: break;
        case 60: 
          { return new Symbol(Token.FILTER);
          }
        case 134: break;
        case 61: 
          { return new Symbol(Token.OFFSET);
          }
        case 135: break;
        case 62: 
          { return new Symbol(Token.PREFIX);
          }
        case 136: break;
        case 63: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG2, yytext());
          }
        case 137: break;
        case 64: 
          { return new Symbol(Token.REDUCED);
          }
        case 138: break;
        case 65: 
          { return new Symbol(Token.SAMETERM);
          }
        case 139: break;
        case 66: 
          { return new Symbol(Token.ORDER_BY);
          }
        case 140: break;
        case 67: 
          { return new Symbol(Token.OPTIONAL);
          }
        case 141: break;
        case 68: 
          { return new Symbol(Token.DESCRIBE);
          }
        case 142: break;
        case 69: 
          { return new Symbol(Token.DATATYPE);
          }
        case 143: break;
        case 70: 
          { return new Symbol(Token.DISTINCT);
          }
        case 144: break;
        case 71: 
          { return new Symbol(Token.CONSTRUCT);
          }
        case 145: break;
        case 72: 
          { return new Symbol(Token.ISLITERAL);
          }
        case 146: break;
        case 73: 
          { return new Symbol(Token.FROM_NAMED);
          }
        case 147: break;
        case 74: 
          { return new Symbol(Token.LANGMATCHES);
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
