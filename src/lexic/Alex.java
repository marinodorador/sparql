/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package lexic;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>SparqlFlex.flex</tt>
 */
public class Alex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_SYM = 2;
  public static final int IRI_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\30\1\13\1\14\1\14\1\13\22\2\1\27\1\41\1\23"+
    "\1\0\1\6\1\0\1\36\1\21\1\25\1\26\1\42\1\17\1\46"+
    "\1\11\1\16\1\43\12\12\1\4\1\33\1\1\1\40\1\3\1\5"+
    "\1\7\1\50\1\76\1\57\1\70\1\20\1\64\1\53\1\60\1\72"+
    "\1\10\1\101\1\47\1\54\1\52\1\67\1\75\1\10\1\66\1\61"+
    "\1\56\1\71\1\10\1\100\1\77\1\74\1\10\1\31\1\22\1\32"+
    "\1\35\1\33\1\34\1\50\1\24\1\57\1\70\1\20\1\63\1\53"+
    "\1\60\1\72\1\10\1\101\1\47\1\54\1\51\1\67\1\75\1\10"+
    "\1\65\1\61\1\55\1\71\1\10\1\100\1\77\1\74\1\10\1\44"+
    "\1\37\1\45\7\33\1\15\61\33\1\33\10\33\27\33\1\33\37\33"+
    "\1\33\70\33\2\73\115\33\1\62\u0180\33\160\33\16\33\1\33\u1c81\33"+
    "\14\33\2\33\32\33\1\15\1\15\25\33\2\33\57\33\272\33\1\102"+
    "\145\33\u0a70\33\u03f0\33\21\33\ua7ff\33\u1800\33\u0900\0\u04d0\33\40\0\u020e\33"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\4\1\1\5\1\6"+
    "\1\7\1\0\1\10\1\11\3\1\1\12\1\13\1\7"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\1\1\25\14\1\1\26\1\2\1\3"+
    "\1\5\1\10\1\11\1\26\1\12\1\13\1\26\1\14"+
    "\1\15\3\26\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\26\1\25\14\26\1\1\1\2\20\1\1\27"+
    "\1\0\1\30\1\4\1\0\1\27\1\0\1\31\1\4"+
    "\1\27\1\0\1\32\1\33\1\4\1\27\1\34\1\27"+
    "\1\35\1\27\1\36\1\0\1\37\1\0\4\27\1\0"+
    "\1\40\2\0\1\27\1\41\2\0\1\27\1\0\1\42"+
    "\3\0\1\43\1\0\1\44\1\45\1\46\1\47\27\0"+
    "\1\31\1\32\2\0\1\50\1\46\27\0\1\30\1\31"+
    "\1\30\1\4\1\33\2\0\3\51\1\27\4\0\3\52"+
    "\1\41\1\0\2\42\2\0\1\44\2\0\1\53\5\0"+
    "\1\54\25\0\1\53\5\0\1\54\22\0\1\36\2\0"+
    "\2\55\7\0\1\42\1\56\1\0\1\57\2\0\1\60"+
    "\4\0\1\61\17\0\1\56\1\0\1\57\2\0\1\60"+
    "\4\0\1\61\17\0\1\62\1\63\3\0\1\42\1\64"+
    "\1\0\1\65\1\66\3\0\1\67\2\0\1\70\7\0"+
    "\1\71\1\0\1\72\1\73\1\0\1\74\1\64\1\0"+
    "\1\65\1\66\3\0\1\67\1\0\1\70\7\0\1\71"+
    "\1\0\1\72\1\73\1\0\1\74\1\75\3\0\1\76"+
    "\2\0\1\77\1\0\1\100\6\0\1\101\2\0\1\76"+
    "\1\0\1\77\1\0\1\100\5\0\1\101\1\102\4\0"+
    "\1\103\11\0\1\103\7\0\1\104\1\0\1\105\1\106"+
    "\1\107\1\110\1\111\3\0\1\104\1\106\1\107\1\110"+
    "\1\111\2\0\1\112\1\0\1\113\1\0\1\112\1\113"+
    "\1\0\1\114\1\0\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\311\0\u057f\0\u05c2"+
    "\0\u029e\0\u0605\0\u0648\0\u029e\0\u068b\0\311\0\311\0\u029e"+
    "\0\u029e\0\311\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0a78\0\u0a78\0\u0a78\0\u0b41\0\u0a78"+
    "\0\u0a78\0\u0367\0\u0a78\0\u0a78\0\u0b84\0\u0bc7\0\u0c0a\0\u0a78"+
    "\0\u0c4d\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0a78\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u0a78\0\u103a\0\u0b41\0\u0bc7"+
    "\0\u0c0a\0\u0c90\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\311\0\u107d"+
    "\0\u03aa\0\u10c0\0\u1103\0\u1146\0\u1189\0\u1103\0\u11cc\0\u029e"+
    "\0\u120f\0\u03aa\0\u1252\0\u1252\0\u1295\0\u12d8\0\u01d5\0\u131b"+
    "\0\u0218\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u0192\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u0a78"+
    "\0\u18dd\0\u03aa\0\u0a78\0\u03aa\0\u0a78\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u0a78\0\u0a78\0\u1f25\0\u1f68"+
    "\0\u0a78\0\u0a78\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u0a78\0\u107d\0\u1252\0\u25b0\0\u25b0\0\u25f3\0\u2636"+
    "\0\u13a1\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u1533\0\u284e\0\u2891\0\u0a78\0\u28d4\0\u1708\0\u2917\0\u295a"+
    "\0\u299d\0\u0a78\0\u29e0\0\u2a23\0\u03aa\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u03aa\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u0a78\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u0a78\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u2785\0\u27c8\0\u3802\0\u3845"+
    "\0\u3888\0\u38cb\0\u2917\0\u390e\0\u3951\0\u3994\0\u03aa\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u03aa\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u0a78\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u0a78\0\u412b\0\u416e"+
    "\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386"+
    "\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e"+
    "\0\u45e1\0\u4624\0\u37bf\0\u3845\0\u4667\0\u46aa\0\u46ed\0\u4730"+
    "\0\u03aa\0\u4773\0\u03aa\0\u03aa\0\u47b6\0\u47f9\0\u483c\0\u03aa"+
    "\0\u487f\0\u48c2\0\u03aa\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11"+
    "\0\u4a54\0\u4a97\0\u03aa\0\u4ada\0\u03aa\0\u03aa\0\u4b1d\0\u03aa"+
    "\0\u0a78\0\u4b60\0\u0a78\0\u0a78\0\u4ba3\0\u4be6\0\u4c29\0\u0a78"+
    "\0\u4c6c\0\u0a78\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe"+
    "\0\u4e41\0\u0a78\0\u4e84\0\u0a78\0\u0a78\0\u4ec7\0\u0a78\0\u0a78"+
    "\0\u4f0a\0\u4f4d\0\u4f90\0\u03aa\0\u4fd3\0\u5016\0\u03aa\0\u5059"+
    "\0\u03aa\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u03aa"+
    "\0\u522e\0\u5271\0\u0a78\0\u52b4\0\u0a78\0\u52f7\0\u0a78\0\u533a"+
    "\0\u537d\0\u53c0\0\u5403\0\u5446\0\u0a78\0\u0a78\0\u5489\0\u54cc"+
    "\0\u550f\0\u5552\0\u03aa\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1"+
    "\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u0a78\0\u57f0\0\u5833\0\u5876"+
    "\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u03aa\0\u59c5\0\u0a78\0\u03aa"+
    "\0\u03aa\0\u03aa\0\u03aa\0\u5a08\0\u5a4b\0\u5a8e\0\u0a78\0\u0a78"+
    "\0\u0a78\0\u0a78\0\u0a78\0\u5ad1\0\u5b14\0\u03aa\0\u5b57\0\u03aa"+
    "\0\u5b9a\0\u0a78\0\u0a78\0\u5bdd\0\u0a78\0\u5c20\0\u03aa\0\u0a78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\1\20\1\21"+
    "\1\13\1\22\1\13\1\23\1\24\1\25\1\26\2\27"+
    "\1\30\1\31\3\13\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\13\1\45"+
    "\1\13\2\46\1\47\1\13\2\50\2\51\2\52\1\53"+
    "\1\54\1\55\2\56\1\13\1\57\1\24\1\13\1\60"+
    "\2\13\1\61\1\62\1\61\1\63\5\61\1\64\1\61"+
    "\1\16\2\0\1\65\1\66\4\61\1\67\1\70\1\71"+
    "\2\72\1\73\1\74\2\61\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\2\61\1\111\1\61\2\112\1\113\1\61\2\114\2\115"+
    "\2\116\1\117\1\120\1\121\2\122\1\61\1\123\1\67"+
    "\1\61\1\124\2\61\1\125\1\126\1\125\1\63\5\125"+
    "\1\64\1\125\1\16\2\0\1\65\1\66\4\125\1\127"+
    "\1\70\1\71\2\16\1\73\1\74\3\125\1\130\1\131"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\132"+
    "\1\110\2\125\1\133\1\125\2\134\1\135\1\125\2\136"+
    "\2\137\2\140\1\141\1\142\1\143\2\144\1\125\1\145"+
    "\1\127\1\125\1\146\2\125\12\0\1\147\70\0\1\150"+
    "\1\17\1\0\1\151\1\152\1\153\1\150\3\153\1\154"+
    "\2\0\1\153\1\155\1\150\1\153\1\150\1\17\1\0"+
    "\1\153\2\150\2\0\3\153\2\17\1\150\1\17\1\156"+
    "\3\150\2\17\1\150\34\153\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\3\17\1\160\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\1\17\1\162\3\0\2\17\1\0\34\17\1\0"+
    "\1\163\1\0\1\163\1\164\1\163\1\0\2\163\1\17"+
    "\1\165\2\0\1\163\1\161\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\4\0\5\163\1\0\2\163\3\0\2\163"+
    "\1\0\34\163\1\0\1\166\1\0\1\166\1\157\1\166"+
    "\1\0\2\166\1\17\1\167\2\0\1\166\1\161\1\0"+
    "\1\166\1\0\1\166\1\0\1\166\4\0\5\166\1\0"+
    "\2\166\3\0\2\166\1\0\34\166\1\0\1\170\1\0"+
    "\3\170\1\0\2\170\1\0\1\171\2\0\1\170\2\0"+
    "\1\170\1\0\1\170\1\0\1\170\4\0\5\170\1\0"+
    "\2\170\3\0\2\170\1\0\34\170\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\1\17\1\172\1\17\1\160"+
    "\2\0\1\17\1\161\1\0\1\172\1\0\1\17\1\0"+
    "\1\172\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\13\172\1\17\10\172\1\17\6\172\1\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\3\17\1\160\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\34\17"+
    "\12\173\1\174\3\0\1\175\64\173\1\147\1\160\1\147"+
    "\1\160\1\176\1\160\1\147\3\160\1\15\2\0\1\17"+
    "\1\177\1\147\1\200\1\147\1\160\1\147\1\160\4\147"+
    "\5\160\1\147\2\160\3\147\2\160\1\147\34\160\13\0"+
    "\1\16\13\0\2\16\53\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\12\0\1\201\70\0\12\202"+
    "\1\203\3\0\1\204\64\202\12\205\1\206\1\0\5\205"+
    "\1\207\1\210\60\205\12\211\1\212\1\0\5\211\1\0"+
    "\1\213\1\214\57\211\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\3\17\1\160\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\1\17\1\215\16\17\1\216"+
    "\13\17\12\0\1\147\1\217\12\0\1\220\2\217\64\0"+
    "\1\147\1\16\13\0\2\16\53\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\3\17\1\160\1\221\1\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\2\0"+
    "\2\221\1\17\1\222\3\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\12\0\1\147\23\0\1\223\45\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\3\17\1\160\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\1\224\1\17\3\0\2\17\1\0"+
    "\34\17\12\0\1\147\25\0\1\225\43\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\3\17\1\160\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\1\17\1\226"+
    "\21\17\2\227\7\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\3\17\1\160\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\12\17\2\230\20\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\3\17\1\160"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\16\17\2\231\14\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\3\17\1\160\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\16\17\2\232\14\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\3\17\1\160"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\20\17\1\233\13\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\3\17\1\160\2\0\1\17\1\161\1\0"+
    "\1\234\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\1\17\1\235\4\17\2\236"+
    "\24\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\3\17\1\160\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\1\17\1\237\14\17\2\240\3\17\2\241"+
    "\7\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\3\17\1\160\2\0\1\17\1\161\1\0\1\242\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\3\17\1\160\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\14\17\2\243\2\244\6\17"+
    "\1\245\5\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\3\17\1\160\2\0\1\17\1\161\1\0\1\246"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\1\17\1\247\21\17\2\250\7\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\3\17"+
    "\1\160\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\2\17\2\251\30\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\3\17\1\160\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\12\17\2\252\20\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\3\17"+
    "\1\160\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\16\17\2\253\14\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\3\17\1\160\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\11\17\1\254\22\17"+
    "\143\0\1\255\102\0\1\256\112\0\1\257\16\0\1\260"+
    "\50\0\1\261\103\0\1\223\103\0\1\262\103\0\1\225"+
    "\112\0\1\263\21\0\2\264\70\0\2\265\105\0\2\266"+
    "\101\0\2\267\103\0\1\270\33\0\1\271\27\0\1\272"+
    "\4\0\2\273\74\0\1\274\14\0\2\275\3\0\2\276"+
    "\27\0\1\277\145\0\2\300\2\301\6\0\1\302\25\0"+
    "\1\303\27\0\1\304\21\0\2\305\60\0\2\306\111\0"+
    "\2\307\105\0\2\310\74\0\1\311\22\0\1\150\2\0"+
    "\1\312\7\150\2\0\5\150\2\0\3\150\2\0\3\150"+
    "\2\0\1\150\1\0\1\313\3\150\2\0\36\150\2\0"+
    "\1\312\7\150\2\0\5\150\2\0\3\150\2\0\3\150"+
    "\2\0\1\150\1\0\4\150\2\0\36\150\1\163\1\0"+
    "\1\314\1\315\1\316\1\150\2\316\1\153\1\316\2\0"+
    "\1\316\1\155\1\150\1\316\1\150\1\163\1\0\1\316"+
    "\2\150\2\0\3\316\2\163\1\150\1\163\1\316\3\150"+
    "\2\163\1\150\34\316\1\150\1\17\1\0\1\151\1\152"+
    "\1\153\1\150\4\153\2\0\1\153\1\155\1\150\1\153"+
    "\1\150\1\17\1\0\1\153\2\150\2\0\3\153\2\17"+
    "\1\150\1\17\1\153\3\150\2\17\1\150\34\153\1\150"+
    "\1\17\1\0\1\151\1\152\1\153\1\150\3\153\1\154"+
    "\2\0\1\153\1\155\1\150\1\153\1\150\1\17\1\0"+
    "\1\153\2\150\2\0\3\153\2\17\1\150\1\17\1\153"+
    "\3\150\2\17\1\150\34\153\1\150\1\17\1\0\1\151"+
    "\2\153\1\150\4\153\2\0\1\153\1\155\1\150\1\153"+
    "\1\150\1\17\1\0\1\153\2\150\2\0\3\153\2\17"+
    "\1\150\1\17\1\153\3\150\2\17\1\150\34\153\1\0"+
    "\1\163\1\0\1\163\1\164\1\163\1\0\2\163\1\17"+
    "\1\163\2\0\1\163\1\161\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\4\0\5\163\1\0\2\163\3\0\2\163"+
    "\1\0\34\163\1\0\1\17\1\0\3\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\34\17\1\0\1\163\1\0\1\163\1\164\1\163\1\0"+
    "\4\163\2\0\1\163\1\317\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\4\0\5\163\1\0\2\163\3\0\2\163"+
    "\1\0\34\163\1\0\1\163\1\0\1\163\1\164\1\163"+
    "\1\0\3\163\1\165\2\0\1\163\1\317\1\0\1\163"+
    "\1\0\1\163\1\0\1\163\4\0\5\163\1\0\2\163"+
    "\3\0\2\163\1\0\34\163\1\0\1\166\1\0\1\166"+
    "\1\157\1\166\1\0\2\166\1\17\1\166\2\0\1\166"+
    "\1\161\1\0\1\166\1\0\1\166\1\0\1\166\4\0"+
    "\5\166\1\0\2\166\3\0\2\166\1\0\34\166\1\0"+
    "\1\170\1\0\3\170\1\0\2\170\1\0\1\170\2\0"+
    "\1\170\2\0\1\170\1\0\1\170\1\0\1\170\4\0"+
    "\5\170\1\0\2\170\3\0\2\170\1\0\34\170\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\1\17\1\172"+
    "\1\320\1\17\2\0\1\17\1\161\1\0\1\172\1\0"+
    "\1\17\1\0\1\172\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\13\172\1\17\10\172\1\17\6\172\1\17"+
    "\12\0\1\321\70\0\12\321\1\174\3\0\1\322\1\321"+
    "\1\323\62\321\12\0\1\322\71\0\1\17\1\0\3\17"+
    "\1\0\3\17\1\324\2\0\1\17\1\161\1\0\1\325"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\2\17\1\326\1\160\2\0\1\17"+
    "\1\161\1\327\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\12\0"+
    "\1\201\5\0\1\330\74\0\1\331\70\0\12\331\1\203"+
    "\3\0\1\332\1\331\1\333\62\331\12\0\1\332\70\0"+
    "\13\205\1\0\5\205\1\334\1\210\72\205\1\206\1\0"+
    "\5\205\1\334\1\210\60\205\21\0\1\335\102\0\1\205"+
    "\1\0\2\205\24\0\1\205\3\0\1\205\5\0\1\205"+
    "\1\0\1\205\15\0\13\211\1\0\5\211\1\0\1\213"+
    "\1\336\71\211\1\212\1\0\5\211\1\0\1\213\1\336"+
    "\57\211\21\0\1\211\1\0\2\211\24\0\1\211\3\0"+
    "\1\211\5\0\1\211\1\0\1\211\15\0\13\211\1\0"+
    "\5\211\1\0\1\213\1\337\57\211\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\12\17\2\340\20\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\22\17\1\341\11\17\13\0\1\217\12\0\1\220\2\217"+
    "\65\0\1\221\13\0\2\221\1\0\1\342\51\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\2\17\2\343"+
    "\30\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\5\17\1\344\26\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\32\17\2\345\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\1\17\1\346"+
    "\32\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\22\17\1\347\11\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\2\17\2\350\30\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\1\351"+
    "\33\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\5\17\1\352\26\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\16\17\2\353\14\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\1\354"+
    "\33\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\20\17\1\355\13\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\1\356\33\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\4\17\1\357"+
    "\14\17\1\360\12\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\14\17\2\361\16\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\21\17\1\362"+
    "\12\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\6\17\2\363\24\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\12\17\2\364\20\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\6\17"+
    "\2\365\24\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\12\17\2\366\20\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\23\17\2\367\7\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\1\370\21\17\1\371\2\372\7\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\373\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\34\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\374\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\61\0"+
    "\2\375\111\0\1\376\62\0\2\377\104\0\1\u0100\127\0"+
    "\2\u0101\50\0\1\u0102\123\0\1\u0103\62\0\2\u0104\77\0"+
    "\1\u0105\107\0\1\u0106\113\0\2\u0107\63\0\1\u0108\122\0"+
    "\1\u0109\62\0\1\u010a\106\0\1\u010b\14\0\1\u010c\75\0"+
    "\2\u010d\106\0\1\u010e\67\0\2\u010f\105\0\2\u0110\75\0"+
    "\2\u0111\105\0\2\u0112\112\0\2\u0113\56\0\1\u0114\21\0"+
    "\1\u0115\2\u0116\27\0\1\u0117\102\0\1\u0118\62\0\1\150"+
    "\1\163\1\0\1\314\1\315\1\316\1\150\4\316\2\0"+
    "\1\316\1\u0119\1\150\1\316\1\150\1\163\1\0\1\316"+
    "\2\150\2\0\3\316\2\163\1\150\1\163\1\316\3\150"+
    "\2\163\1\150\34\316\1\0\1\163\1\0\3\163\1\0"+
    "\4\163\2\0\1\163\1\317\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\4\0\5\163\1\0\2\163\3\0\2\163"+
    "\1\0\34\163\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\1\17\1\u011a\1\17\1\u011a\2\0\1\17\1\161"+
    "\1\0\1\u011a\1\0\1\17\1\0\1\u011a\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\13\u011a\1\17\10\u011a"+
    "\1\17\6\u011a\1\17\12\0\1\322\5\0\1\u011b\73\0"+
    "\1\u011c\1\321\4\0\1\u011c\64\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\3\17\1\324\2\0\1\17\1\161"+
    "\1\0\1\325\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\34\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\2\17\1\326\1\u011d"+
    "\2\0\1\17\1\161\1\327\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\34\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\3\17\1\u011d\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\12\0\1\u011e\101\0\1\327\1\u011e"+
    "\4\0\1\327\75\0\1\332\5\0\1\u011f\73\0\1\u0120"+
    "\1\331\4\0\1\u0120\63\0\21\335\1\u0121\1\u0122\60\335"+
    "\13\u0123\1\u0124\5\u0123\1\u0124\1\u0125\1\u0126\57\u0123\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\u0127\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\34\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\2\17\2\u0128\30\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\4\17\1\u0129\27\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\23\17\2\u012a"+
    "\7\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\26\17\1\u012b\5\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\u012c\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\34\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\12\17\2\u012d\20\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\u012e\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\34\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\u012f\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\12\17\2\u0130\20\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\5\17\1\u0131\26\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\6\17\2\u0132\24\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\u0133"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\22\17\1\u0134\11\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\12\17"+
    "\2\u0135\20\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\u0136\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\23\17\2\u0137\7\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\10\17\1\u0138"+
    "\23\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\1\17\1\u0139\32\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\6\17\2\u013a\24\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\20\17"+
    "\1\u013b\13\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\23\17\2\u013c\7\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\16\17\2\u013d\14\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\16\17\2\u013e\14\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\14\17\2\u013f\16\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\16\17\2\u0140"+
    "\14\17\20\0\1\u0141\133\0\2\u0142\103\0\1\u0143\121\0"+
    "\2\u0144\104\0\1\u0145\25\0\1\u0146\143\0\2\u0147\40\0"+
    "\1\u0148\102\0\1\u0149\143\0\2\u014a\74\0\1\u014b\103\0"+
    "\2\u014c\44\0\1\u014d\153\0\1\u014e\72\0\2\u014f\40\0"+
    "\1\u0150\154\0\2\u0151\66\0\1\u0152\73\0\1\u0153\107\0"+
    "\2\u0154\113\0\1\u0155\105\0\2\u0156\74\0\2\u0157\101\0"+
    "\2\u0158\77\0\2\u0159\103\0\2\u015a\14\0\1\150\1\163"+
    "\1\0\1\314\2\316\1\150\4\316\2\0\1\316\1\u0119"+
    "\1\150\1\316\1\150\1\163\1\0\1\316\2\150\2\0"+
    "\3\316\2\163\1\150\1\163\1\316\3\150\2\163\1\150"+
    "\34\316\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\1\17\1\u011a\1\320\1\u011a\2\0\1\17\1\161\1\0"+
    "\1\u011a\1\0\1\17\1\0\1\u011a\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\13\u011a\1\17\10\u011a\1\17"+
    "\6\u011a\1\17\11\0\1\u011c\1\u015b\4\0\1\u011c\75\0"+
    "\1\u015b\101\0\1\u0120\1\u015c\4\0\1\u0120\75\0\1\u015c"+
    "\70\0\21\335\1\u015d\1\u0122\60\335\21\0\1\335\1\0"+
    "\2\335\24\0\1\335\3\0\1\335\5\0\1\335\1\0"+
    "\1\335\15\0\22\u0124\1\u015e\1\u015f\57\u0124\21\0\1\u0123"+
    "\1\0\2\u0123\24\0\1\u0123\3\0\1\u0123\5\0\1\u0123"+
    "\1\0\1\u0123\15\0\13\u0123\1\u0124\5\u0123\1\u0124\1\u0125"+
    "\1\u0160\57\u0123\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\21\17\1\u0161\12\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\5\17\1\u0162\26\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\6\17\2\u0163\24\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\11\17\1\u0164\22\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\6\17\2\u0165"+
    "\24\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\10\17\1\u0166\23\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\6\17\2\u0167\24\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\u0168\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\34\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\2\0\1\u0169\1\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\u016a"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\30\17\1\u016b\3\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\10\17"+
    "\1\u016c\23\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\u016d\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\16\17\2\u016e\14\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\20\17\1\u016f"+
    "\13\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\16\17\2\u0170\14\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\6\17\2\u0171\24\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\23\17"+
    "\2\u0172\7\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\2\17\2\u0173\30\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\6\17\2\u0174\24\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\23\17\2\u0175\7\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\23\17\2\u0176\7\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\23\17\2\u0177"+
    "\7\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\u0178\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\70\0\1\u0179\66\0\1\u017a\103\0\2\u017b"+
    "\104\0\1\u017c\77\0\2\u017d\103\0\1\u017e\100\0\2\u017f"+
    "\44\0\1\u0180\111\0\1\u0169\73\0\1\u0181\161\0\1\u0182"+
    "\62\0\1\u0183\43\0\1\u0184\147\0\2\u0185\103\0\1\u0186"+
    "\100\0\2\u0187\71\0\2\u0188\116\0\2\u0189\60\0\2\u018a"+
    "\105\0\2\u018b\116\0\2\u018c\101\0\2\u018d\101\0\2\u018e"+
    "\27\0\1\u018f\62\0\21\335\1\u0190\1\u0122\60\335\21\0"+
    "\1\u0124\1\0\2\u0124\24\0\1\u0124\3\0\1\u0124\5\0"+
    "\1\u0124\1\0\1\u0124\15\0\22\u0124\1\u015e\1\u0191\57\u0124"+
    "\13\u0123\1\u0124\5\u0123\1\u0124\1\u0125\1\336\57\u0123\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\1\17"+
    "\1\u0192\32\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\16\17\2\u0193\14\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\6\17\2\u0194\24\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\u0195\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\34\17\51\0\2\u0196\31\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\16\17\2\u0197\14\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\u0198\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\6\17"+
    "\2\u0199\24\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\2\0\1\u019a\1\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\34\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\2\17\2\u019b\30\17"+
    "\1\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\23\17\2\u019c\7\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\25\17\1\u019d\6\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\2\17\2\u019e"+
    "\30\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\u019f\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\30\17\1\u01a0\3\17\50\0\1\u01a1\117\0"+
    "\2\u01a2\71\0\2\u01a3\44\0\1\u01a4\147\0\2\u01a5\34\0"+
    "\1\u01a6\137\0\2\u01a7\53\0\1\u019a\124\0\2\u01a8\122\0"+
    "\2\u01a9\103\0\1\u01aa\57\0\2\u01ab\50\0\1\u01ac\161\0"+
    "\1\u01ad\3\0\22\u0124\1\u015e\1\u01ae\57\u0124\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\6\17\2\u01af"+
    "\24\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\22\17\1\u01b0\11\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\16\17\2\u01b1\14\17\50\0"+
    "\1\u01b2\33\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\21\17\1\u01b3\12\17\24\0\1\u01b4\51\0\1\u01b4"+
    "\5\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\1\17\1\u01b5\32\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\u01b6\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\27\17\1\u01b6\4\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\26\17\1\u01b7"+
    "\5\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\10\17\1\u01b8\23\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\16\17\2\u01b9\14\17\55\0"+
    "\2\u01ba\115\0\1\u01bb\76\0\2\u01bc\104\0\1\u01bd\62\0"+
    "\1\u01be\56\0\1\u01bf\51\0\1\u01bf\101\0\1\u01c0\64\0"+
    "\1\u01c1\110\0\2\u01c2\15\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\10\17\1\u01c3\23\17\1\0\1\17"+
    "\1\0\1\17\1\157\1\17\1\0\4\17\2\0\1\17"+
    "\1\161\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\10\17\1\u01c4"+
    "\23\17\1\0\1\17\1\0\1\17\1\157\1\17\1\0"+
    "\4\17\2\0\1\17\1\161\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\5\17\1\u01c5\26\17\54\0\1\u01c6\122\0\1\u01c7"+
    "\7\0\1\17\1\0\1\17\1\157\1\17\1\0\4\17"+
    "\2\0\1\17\1\161\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\1\u01c8\33\17\1\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\u01c9\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\157"+
    "\1\17\1\0\4\17\2\0\1\17\1\161\1\0\1\u01ca"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\17\1\0\1\17"+
    "\1\157\1\17\1\0\4\17\2\0\1\17\1\161\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\6\17\2\u01cb\24\17\1\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\1\17"+
    "\1\u01cc\32\17\57\0\1\u01cd\102\0\1\u01ce\77\0\1\u01cf"+
    "\75\0\1\u01d0\53\0\1\u01d1\102\0\1\u01d2\137\0\2\u01d3"+
    "\74\0\1\u01d4\33\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\11\17\1\u01d5\22\17\1\0\1\17\1\0"+
    "\1\17\1\157\1\17\1\0\4\17\2\0\1\17\1\161"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\6\17\2\u01d6\24\17"+
    "\20\0\1\u01d7\63\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\1\u01d8\33\17\60\0\1\u01d9\77\0\2\u01da"+
    "\73\0\1\u01db\34\0\1\17\1\0\1\17\1\157\1\17"+
    "\1\0\4\17\2\0\1\17\1\161\1\0\1\u01dc\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\70\0\1\u01dd\32\0\1\u01de\63\0"+
    "\1\17\1\0\1\17\1\157\1\17\1\0\4\17\2\0"+
    "\1\17\1\161\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\12\17"+
    "\2\u01df\20\17\61\0\2\u01e0\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23651];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\13\1\1\0\41\1\1\11\2\1\3\11\1\1"+
    "\2\11\1\1\2\11\3\1\1\11\1\1\5\11\16\1"+
    "\1\11\22\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\11\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\1\3\0\1\11"+
    "\1\0\1\1\1\11\1\1\1\11\27\0\2\11\2\0"+
    "\2\11\27\0\1\11\4\1\2\0\4\1\4\0\3\1"+
    "\1\11\1\0\2\1\2\0\1\11\2\0\1\1\5\0"+
    "\1\1\25\0\1\11\5\0\1\11\22\0\1\1\2\0"+
    "\2\1\7\0\2\1\1\0\1\1\2\0\1\1\4\0"+
    "\1\1\17\0\1\11\1\0\1\1\2\0\1\11\4\0"+
    "\1\1\17\0\2\1\3\0\2\1\1\0\2\1\3\0"+
    "\1\1\2\0\1\1\7\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\0\2\11\3\0\1\11\1\0\1\11"+
    "\7\0\1\11\1\0\2\11\1\0\2\11\3\0\1\1"+
    "\2\0\1\1\1\0\1\1\6\0\1\1\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\4\0\1\1"+
    "\11\0\1\11\7\0\1\1\1\0\1\11\4\1\3\0"+
    "\5\11\2\0\1\1\1\0\1\1\1\0\2\11\1\0"+
    "\1\11\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public StringBuffer lexeme = new StringBuffer();;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(Token.ERROR, yytext());
          }
        case 78: break;
        case 2: 
          { return new Symbol(Token.LESS);
          }
        case 79: break;
        case 3: 
          { return new Symbol(Token.GREATER);
          }
        case 80: break;
        case 4: 
          { return new Symbol(Token.PNAME_NS, yytext());
          }
        case 81: break;
        case 5: 
          { return new Symbol(Token.SUB);
          }
        case 82: break;
        case 6: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER, yytext());
          }
        case 83: break;
        case 7: 
          { 
          }
        case 84: break;
        case 8: 
          { return new Symbol(Token.PERIOD);
          }
        case 85: break;
        case 9: 
          { return new Symbol(Token.PLUS);
          }
        case 86: break;
        case 10: 
          { return new Symbol(Token.LEFT_PARENTH);
          }
        case 87: break;
        case 11: 
          { return new Symbol(Token.RIGTH_PARENTH);
          }
        case 88: break;
        case 12: 
          { return new Symbol(Token.LEFT_CLASP);
          }
        case 89: break;
        case 13: 
          { return new Symbol(Token.RIGHT_CLASP);
          }
        case 90: break;
        case 14: 
          { return new Symbol(Token.EQUAL);
          }
        case 91: break;
        case 15: 
          { return new Symbol(Token.NOT);
          }
        case 92: break;
        case 16: 
          { return new Symbol(Token.MULT);
          }
        case 93: break;
        case 17: 
          { return new Symbol(Token.DIV);
          }
        case 94: break;
        case 18: 
          { return new Symbol(Token.LEFT_BRACE);
          }
        case 95: break;
        case 19: 
          { return new Symbol(Token.RIGHT_BRACE);
          }
        case 96: break;
        case 20: 
          { return new Symbol(Token.COMMA);
          }
        case 97: break;
        case 21: 
          { return new Symbol(Token.A);
          }
        case 98: break;
        case 22: 
          { yybegin(YYINITIAL);
          }
        case 99: break;
        case 23: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL, yytext());
          }
        case 100: break;
        case 24: 
          { yybegin(YYINITIAL);return new Symbol(Token.IRI_REF, yytext());
          }
        case 101: break;
        case 25: 
          { return new Symbol(Token.LT);
          }
        case 102: break;
        case 26: 
          { return new Symbol(Token.GT);
          }
        case 103: break;
        case 27: 
          { return new Symbol(Token.PNAME_LN, yytext());
          }
        case 104: break;
        case 28: 
          { return new Symbol(Token.VAR1, yytext());
          }
        case 105: break;
        case 29: 
          { return new Symbol(Token.VAR2, yytext());
          }
        case 106: break;
        case 30: 
          { return new Symbol(Token.LANGTAG, yytext());
          }
        case 107: break;
        case 31: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_NEGATIVE, yytext());
          }
        case 108: break;
        case 32: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_POSITIVE, yytext());
          }
        case 109: break;
        case 33: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL1, yytext());
          }
        case 110: break;
        case 34: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL2, yytext());
          }
        case 111: break;
        case 35: 
          { return new Symbol(Token.NIL, yytext());
          }
        case 112: break;
        case 36: 
          { return new Symbol(Token.ANON, yytext());
          }
        case 113: break;
        case 37: 
          { return new Symbol(Token.AND);
          }
        case 114: break;
        case 38: 
          { return new Symbol(Token.OR);
          }
        case 115: break;
        case 39: 
          { return new Symbol(Token.NOT_EQUAL);
          }
        case 116: break;
        case 40: 
          { yybegin(IRI_STATE);return new Symbol(Token.TYPE, yytext());
          }
        case 117: break;
        case 41: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_NEGATIVE, yytext());
          }
        case 118: break;
        case 42: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_POSITIVE, yytext());
          }
        case 119: break;
        case 43: 
          { return new Symbol(Token.ASK);
          }
        case 120: break;
        case 44: 
          { return new Symbol(Token.STR);
          }
        case 121: break;
        case 45: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE, yytext());
          }
        case 122: break;
        case 46: 
          { return new Symbol(Token.BASE);
          }
        case 123: break;
        case 47: 
          { return new Symbol(Token.LANG);
          }
        case 124: break;
        case 48: 
          { return new Symbol(Token.TRUE);
          }
        case 125: break;
        case 49: 
          { return new Symbol(Token.FROM);
          }
        case 126: break;
        case 50: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_NEGATIVE, yytext());
          }
        case 127: break;
        case 51: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_POSITIVE, yytext());
          }
        case 128: break;
        case 52: 
          { return new Symbol(Token.BOUND);
          }
        case 129: break;
        case 53: 
          { return new Symbol(Token.LIMIT);
          }
        case 130: break;
        case 54: 
          { return new Symbol(Token.GRAPH);
          }
        case 131: break;
        case 55: 
          { return new Symbol(Token.FALSE);
          }
        case 132: break;
        case 56: 
          { return new Symbol(Token.REGEX);
          }
        case 133: break;
        case 57: 
          { return new Symbol(Token.UNION);
          }
        case 134: break;
        case 58: 
          { return new Symbol(Token.ISURI);
          }
        case 135: break;
        case 59: 
          { return new Symbol(Token.ISIRI);
          }
        case 136: break;
        case 60: 
          { return new Symbol(Token.WHERE);
          }
        case 137: break;
        case 61: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG1, yytext());
          }
        case 138: break;
        case 62: 
          { return new Symbol(Token.SELECT);
          }
        case 139: break;
        case 63: 
          { return new Symbol(Token.FILTER);
          }
        case 140: break;
        case 64: 
          { return new Symbol(Token.OFFSET);
          }
        case 141: break;
        case 65: 
          { return new Symbol(Token.PREFIX);
          }
        case 142: break;
        case 66: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG2, yytext());
          }
        case 143: break;
        case 67: 
          { return new Symbol(Token.REDUCED);
          }
        case 144: break;
        case 68: 
          { return new Symbol(Token.SAMETERM);
          }
        case 145: break;
        case 69: 
          { return new Symbol(Token.ORDER_BY);
          }
        case 146: break;
        case 70: 
          { return new Symbol(Token.OPTIONAL);
          }
        case 147: break;
        case 71: 
          { return new Symbol(Token.DESCRIBE);
          }
        case 148: break;
        case 72: 
          { return new Symbol(Token.DATATYPE);
          }
        case 149: break;
        case 73: 
          { return new Symbol(Token.DISTINCT);
          }
        case 150: break;
        case 74: 
          { return new Symbol(Token.CONSTRUCT);
          }
        case 151: break;
        case 75: 
          { return new Symbol(Token.ISLITERAL);
          }
        case 152: break;
        case 76: 
          { return new Symbol(Token.FROM_NAMED);
          }
        case 153: break;
        case 77: 
          { return new Symbol(Token.LANGMATCHES);
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
