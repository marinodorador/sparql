/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package lexic;
import static lexic.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>SparqlFlex.flex</tt>
 */
public class Alex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_SYM = 2;
  public static final int IRI_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\30\1\13\1\14\1\14\1\13\22\2\1\27\1\41\1\23"+
    "\1\0\1\6\1\0\1\36\1\21\1\25\1\26\1\42\1\17\1\46"+
    "\1\11\1\16\1\43\12\12\1\4\1\33\1\1\1\40\1\3\1\5"+
    "\1\7\1\51\1\76\1\60\1\53\1\20\1\65\1\55\1\61\1\72"+
    "\1\10\1\77\1\54\1\52\1\50\1\70\1\75\1\10\1\67\1\62"+
    "\1\57\1\71\1\10\1\102\1\101\1\74\1\10\1\31\1\22\1\32"+
    "\1\35\1\33\1\34\1\51\1\24\1\60\1\53\1\20\1\64\1\55"+
    "\1\61\1\72\1\10\1\77\1\54\1\52\1\47\1\70\1\75\1\10"+
    "\1\66\1\62\1\56\1\71\1\10\1\102\1\101\1\74\1\10\1\44"+
    "\1\37\1\45\7\33\1\15\61\33\1\33\10\33\27\33\1\33\37\33"+
    "\1\33\70\33\2\73\115\33\1\63\u0180\33\160\33\16\33\1\33\u1c81\33"+
    "\14\33\2\33\32\33\1\15\1\15\25\33\2\33\57\33\272\33\1\100"+
    "\145\33\u0a70\33\u03f0\33\21\33\ua7ff\33\u1800\33\u0900\0\u04d0\33\40\0\u020e\33"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\4\1\1\5\1\6"+
    "\1\7\1\0\1\10\1\11\3\1\1\12\1\13\1\7"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\1\1\25\15\1\1\26\1\2\1\3"+
    "\1\5\1\10\1\11\1\26\1\12\1\13\1\26\1\14"+
    "\1\15\3\26\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\26\1\25\15\26\1\1\1\2\21\1\1\27"+
    "\1\0\1\30\1\4\1\0\1\27\1\0\1\31\1\4"+
    "\1\27\1\0\1\32\1\33\1\4\1\27\1\34\1\27"+
    "\1\35\1\27\1\36\1\0\1\37\1\0\4\27\1\0"+
    "\1\40\2\0\1\27\1\41\2\0\1\27\1\0\1\42"+
    "\3\0\1\43\1\0\1\44\1\45\1\46\1\47\30\0"+
    "\1\31\1\32\2\0\1\50\1\46\30\0\1\30\1\31"+
    "\1\30\1\4\1\33\2\0\3\51\1\27\4\0\3\52"+
    "\1\41\1\0\2\42\2\0\1\44\1\0\1\53\1\54"+
    "\12\0\1\55\22\0\1\53\1\54\12\0\1\55\20\0"+
    "\1\36\2\0\2\56\7\0\1\42\1\57\2\0\1\53"+
    "\2\0\1\60\2\0\1\61\4\0\1\62\15\0\1\57"+
    "\2\0\1\53\2\0\1\60\2\0\1\61\4\0\1\62"+
    "\15\0\1\63\1\64\3\0\1\42\1\65\1\66\4\0"+
    "\1\67\1\70\3\0\1\71\3\0\1\72\3\0\1\73"+
    "\2\0\1\74\1\75\1\0\1\76\1\65\1\66\4\0"+
    "\1\67\1\70\3\0\1\71\2\0\1\72\3\0\1\73"+
    "\2\0\1\74\1\75\1\0\1\76\1\77\6\0\1\100"+
    "\2\0\1\101\1\0\1\102\4\0\1\103\5\0\1\100"+
    "\1\0\1\101\1\0\1\102\3\0\1\103\1\104\7\0"+
    "\1\105\2\0\1\106\7\0\1\105\1\0\1\106\1\0"+
    "\1\107\1\110\1\111\2\0\1\112\1\0\1\113\1\114"+
    "\1\0\1\107\1\110\1\111\2\0\1\112\1\114\2\0"+
    "\1\115\1\0\1\116\1\0\1\115\1\116\1\0\1\117"+
    "\1\0\2\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\311\0\u057f\0\u05c2"+
    "\0\u029e\0\u0605\0\u0648\0\u029e\0\u068b\0\311\0\311\0\u029e"+
    "\0\u029e\0\311\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0abb\0\u0abb\0\u0abb\0\u0b84"+
    "\0\u0abb\0\u0abb\0\u0367\0\u0abb\0\u0abb\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0abb\0\u0c90\0\u0abb\0\u0abb\0\u0abb\0\u0abb\0\u0abb\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u0abb\0\u10c0"+
    "\0\u0b84\0\u0c0a\0\u0c4d\0\u0cd3\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\311\0\u1103\0\u03aa\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1189\0\u1252\0\u029e\0\u1295\0\u03aa\0\u12d8\0\u12d8\0\u131b"+
    "\0\u135e\0\u01d5\0\u13a1\0\u0218\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u0192\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a"+
    "\0\u18dd\0\u1920\0\u0abb\0\u1963\0\u03aa\0\u0abb\0\u03aa\0\u0abb"+
    "\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u0abb\0\u0abb\0\u1fee\0\u2031\0\u0abb\0\u0abb\0\u2074\0\u20b7"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u0abb\0\u1103"+
    "\0\u12d8\0\u26bc\0\u26bc\0\u26ff\0\u2742\0\u1427\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u15b9\0\u295a\0\u299d"+
    "\0\u0abb\0\u29e0\0\u178e\0\u2a23\0\u2a66\0\u2aa9\0\u0abb\0\u2aec"+
    "\0\u03aa\0\u03aa\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e"+
    "\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u03aa\0\u2dcd\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b"+
    "\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u0abb"+
    "\0\u0abb\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415"+
    "\0\u3458\0\u349b\0\u34de\0\u0abb\0\u3521\0\u3564\0\u35a7\0\u35ea"+
    "\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7\0\u2891"+
    "\0\u28d4\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u2a23\0\u3b26\0\u3b69"+
    "\0\u3bac\0\u03aa\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e"+
    "\0\u3d81\0\u3dc4\0\u03aa\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13"+
    "\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b"+
    "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u0abb\0\u42bd\0\u4300"+
    "\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u0abb\0\u44d5"+
    "\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed"+
    "\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905"+
    "\0\u4948\0\u39d7\0\u3a5d\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u03aa"+
    "\0\u03aa\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u03aa\0\u03aa\0\u4ba3"+
    "\0\u4be6\0\u4c29\0\u03aa\0\u4c6c\0\u4caf\0\u4cf2\0\u03aa\0\u4d35"+
    "\0\u4d78\0\u4dbb\0\u03aa\0\u4dfe\0\u4e41\0\u03aa\0\u03aa\0\u4e84"+
    "\0\u03aa\0\u0abb\0\u0abb\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u0abb"+
    "\0\u0abb\0\u4fd3\0\u5016\0\u5059\0\u0abb\0\u509c\0\u50df\0\u0abb"+
    "\0\u5122\0\u5165\0\u51a8\0\u0abb\0\u51eb\0\u522e\0\u0abb\0\u0abb"+
    "\0\u5271\0\u0abb\0\u0abb\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0"+
    "\0\u5403\0\u03aa\0\u5446\0\u5489\0\u03aa\0\u54cc\0\u03aa\0\u550f"+
    "\0\u5552\0\u5595\0\u55d8\0\u03aa\0\u561b\0\u565e\0\u56a1\0\u56e4"+
    "\0\u5727\0\u0abb\0\u576a\0\u0abb\0\u57ad\0\u0abb\0\u57f0\0\u5833"+
    "\0\u5876\0\u0abb\0\u0abb\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5"+
    "\0\u5a08\0\u5a4b\0\u03aa\0\u5a8e\0\u5ad1\0\u03aa\0\u5b14\0\u5b57"+
    "\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u0abb\0\u5ce9\0\u0abb"+
    "\0\u5d2c\0\u03aa\0\u03aa\0\u03aa\0\u5d6f\0\u5db2\0\u03aa\0\u5df5"+
    "\0\u0abb\0\u03aa\0\u5e38\0\u0abb\0\u0abb\0\u0abb\0\u5e7b\0\u5ebe"+
    "\0\u0abb\0\u0abb\0\u5f01\0\u5f44\0\u03aa\0\u5f87\0\u03aa\0\u5fca"+
    "\0\u0abb\0\u0abb\0\u600d\0\u0abb\0\u6050\0\u03aa\0\u0abb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\0\1\17\1\20\1\21"+
    "\1\13\1\22\1\13\1\23\1\24\1\25\1\26\2\27"+
    "\1\30\1\31\3\13\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\43\1\44\1\13\1\45"+
    "\1\46\1\47\2\50\1\51\1\13\2\52\2\53\2\54"+
    "\1\55\1\56\2\57\1\13\1\60\1\24\3\13\1\61"+
    "\1\62\1\63\1\62\1\64\5\62\1\65\1\62\1\16"+
    "\2\0\1\66\1\67\4\62\1\70\1\71\1\72\2\73"+
    "\1\74\1\75\2\62\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\2\110\1\111\1\62"+
    "\1\112\1\113\1\114\2\115\1\116\1\62\2\117\2\120"+
    "\2\121\1\122\1\123\2\124\1\62\1\125\1\70\3\62"+
    "\1\126\1\127\1\130\1\127\1\64\5\127\1\65\1\127"+
    "\1\16\2\0\1\66\1\67\4\127\1\131\1\71\1\72"+
    "\2\16\1\74\1\75\3\127\1\132\1\133\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\2\134\1\111\1\127"+
    "\1\135\1\136\1\137\2\140\1\141\1\127\2\142\2\143"+
    "\2\144\1\145\1\146\2\147\1\127\1\150\1\131\3\127"+
    "\1\151\12\0\1\152\70\0\1\153\1\17\1\0\1\154"+
    "\1\155\1\156\1\153\3\156\1\157\2\0\1\156\1\160"+
    "\1\153\1\156\1\153\1\17\1\0\1\156\2\153\2\0"+
    "\3\156\2\17\1\153\1\17\1\161\3\153\2\17\1\153"+
    "\34\156\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\3\17\1\163\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\1\17\1\165"+
    "\3\0\2\17\1\0\34\17\1\0\1\166\1\0\1\166"+
    "\1\167\1\166\1\0\2\166\1\17\1\170\2\0\1\166"+
    "\1\164\1\0\1\166\1\0\1\166\1\0\1\166\4\0"+
    "\5\166\1\0\2\166\3\0\2\166\1\0\34\166\1\0"+
    "\1\171\1\0\1\171\1\162\1\171\1\0\2\171\1\17"+
    "\1\172\2\0\1\171\1\164\1\0\1\171\1\0\1\171"+
    "\1\0\1\171\4\0\5\171\1\0\2\171\3\0\2\171"+
    "\1\0\34\171\1\0\1\173\1\0\3\173\1\0\2\173"+
    "\1\0\1\174\2\0\1\173\2\0\1\173\1\0\1\173"+
    "\1\0\1\173\4\0\5\173\1\0\2\173\3\0\2\173"+
    "\1\0\34\173\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\1\17\1\175\1\17\1\163\2\0\1\17\1\164"+
    "\1\0\1\175\1\0\1\17\1\0\1\175\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\14\175\1\17\7\175"+
    "\1\17\4\175\1\17\2\175\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\3\17\1\163\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\34\17\12\176\1\177"+
    "\3\0\1\200\64\176\1\152\1\163\1\152\1\163\1\201"+
    "\1\163\1\152\3\163\1\15\2\0\1\17\1\202\1\152"+
    "\1\203\1\152\1\163\1\152\1\163\4\152\5\163\1\152"+
    "\2\163\3\152\2\163\1\152\34\163\13\0\1\16\13\0"+
    "\2\16\53\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\12\0\1\204\70\0\12\205\1\206\3\0"+
    "\1\207\64\205\12\210\1\211\1\0\5\210\1\212\1\213"+
    "\60\210\12\214\1\215\1\0\5\214\1\0\1\216\1\217"+
    "\57\214\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\3\17\1\163\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\2\17\1\220\16\17\1\221\12\17\12\0"+
    "\1\152\1\222\12\0\1\223\2\222\64\0\1\152\1\16"+
    "\13\0\2\16\53\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\3\17\1\163\1\224\1\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\2\0\2\224\1\17"+
    "\1\225\3\17\1\0\2\17\3\0\2\17\1\0\34\17"+
    "\12\0\1\152\23\0\1\226\45\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\3\17\1\163\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\1\227\1\17\3\0\2\17\1\0\34\17\12\0"+
    "\1\152\25\0\1\230\43\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\3\17\1\163\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\2\17\1\231\31\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\3\17\1\163"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\13\17\2\232\17\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\3\17\1\163\2\0\1\17\1\164\1\0"+
    "\1\233\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\2\17\1\234\20\17\2\235"+
    "\7\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\3\17\1\163\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\2\17\1\236\20\17\2\237\7\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\3\17\1\163"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\17\17\2\240\13\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\3\17\1\163\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\17\17\2\241\13\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\3\17\1\163"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\21\17\1\242\12\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\3\17\1\163\2\0\1\17\1\164\1\0"+
    "\1\243\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\2\17\1\244\4\17\2\245"+
    "\23\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\3\17\1\163\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\2\17\1\246\14\17\2\247\2\17\2\250"+
    "\7\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\3\17\1\163\2\0\1\17\1\164\1\0\1\251\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\3\17\1\163\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\15\17\2\252\2\253\5\17"+
    "\1\254\5\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\3\17\1\163\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\2\255\32\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\3\17\1\163\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\13\17\2\256"+
    "\17\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\3\17\1\163\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\17\17\2\257\13\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\3\17\1\163\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\12\17\1\260"+
    "\21\17\143\0\1\261\102\0\1\262\113\0\1\263\16\0"+
    "\1\264\47\0\1\265\103\0\1\226\103\0\1\266\103\0"+
    "\1\230\113\0\1\267\113\0\2\270\37\0\1\271\30\0"+
    "\1\272\20\0\2\273\60\0\1\274\20\0\2\275\75\0"+
    "\2\276\101\0\2\277\103\0\1\300\32\0\1\301\30\0"+
    "\1\302\4\0\2\303\74\0\1\304\14\0\2\305\2\0"+
    "\2\306\27\0\1\307\146\0\2\310\2\311\5\0\1\312"+
    "\54\0\2\313\114\0\2\314\105\0\2\315\74\0\1\316"+
    "\21\0\1\153\2\0\1\317\7\153\2\0\5\153\2\0"+
    "\3\153\2\0\3\153\2\0\1\153\1\0\1\320\3\153"+
    "\2\0\36\153\2\0\1\317\7\153\2\0\5\153\2\0"+
    "\3\153\2\0\3\153\2\0\1\153\1\0\4\153\2\0"+
    "\36\153\1\166\1\0\1\321\1\322\1\323\1\153\2\323"+
    "\1\156\1\323\2\0\1\323\1\160\1\153\1\323\1\153"+
    "\1\166\1\0\1\323\2\153\2\0\3\323\2\166\1\153"+
    "\1\166\1\323\3\153\2\166\1\153\34\323\1\153\1\17"+
    "\1\0\1\154\1\155\1\156\1\153\4\156\2\0\1\156"+
    "\1\160\1\153\1\156\1\153\1\17\1\0\1\156\2\153"+
    "\2\0\3\156\2\17\1\153\1\17\1\156\3\153\2\17"+
    "\1\153\34\156\1\153\1\17\1\0\1\154\1\155\1\156"+
    "\1\153\3\156\1\157\2\0\1\156\1\160\1\153\1\156"+
    "\1\153\1\17\1\0\1\156\2\153\2\0\3\156\2\17"+
    "\1\153\1\17\1\156\3\153\2\17\1\153\34\156\1\153"+
    "\1\17\1\0\1\154\2\156\1\153\4\156\2\0\1\156"+
    "\1\160\1\153\1\156\1\153\1\17\1\0\1\156\2\153"+
    "\2\0\3\156\2\17\1\153\1\17\1\156\3\153\2\17"+
    "\1\153\34\156\1\0\1\166\1\0\1\166\1\167\1\166"+
    "\1\0\2\166\1\17\1\166\2\0\1\166\1\164\1\0"+
    "\1\166\1\0\1\166\1\0\1\166\4\0\5\166\1\0"+
    "\2\166\3\0\2\166\1\0\34\166\1\0\1\17\1\0"+
    "\3\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\166\1\0\1\166"+
    "\1\167\1\166\1\0\4\166\2\0\1\166\1\324\1\0"+
    "\1\166\1\0\1\166\1\0\1\166\4\0\5\166\1\0"+
    "\2\166\3\0\2\166\1\0\34\166\1\0\1\166\1\0"+
    "\1\166\1\167\1\166\1\0\3\166\1\170\2\0\1\166"+
    "\1\324\1\0\1\166\1\0\1\166\1\0\1\166\4\0"+
    "\5\166\1\0\2\166\3\0\2\166\1\0\34\166\1\0"+
    "\1\171\1\0\1\171\1\162\1\171\1\0\2\171\1\17"+
    "\1\171\2\0\1\171\1\164\1\0\1\171\1\0\1\171"+
    "\1\0\1\171\4\0\5\171\1\0\2\171\3\0\2\171"+
    "\1\0\34\171\1\0\1\173\1\0\3\173\1\0\2\173"+
    "\1\0\1\173\2\0\1\173\2\0\1\173\1\0\1\173"+
    "\1\0\1\173\4\0\5\173\1\0\2\173\3\0\2\173"+
    "\1\0\34\173\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\1\17\1\175\1\325\1\17\2\0\1\17\1\164"+
    "\1\0\1\175\1\0\1\17\1\0\1\175\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\14\175\1\17\7\175"+
    "\1\17\4\175\1\17\2\175\12\0\1\326\70\0\12\326"+
    "\1\177\3\0\1\327\1\326\1\330\62\326\12\0\1\327"+
    "\71\0\1\17\1\0\3\17\1\0\3\17\1\331\2\0"+
    "\1\17\1\164\1\0\1\332\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\34\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\2\17"+
    "\1\333\1\163\2\0\1\17\1\164\1\334\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\12\0\1\204\5\0\1\335\74\0"+
    "\1\336\70\0\12\336\1\206\3\0\1\337\1\336\1\340"+
    "\62\336\12\0\1\337\70\0\13\210\1\0\5\210\1\341"+
    "\1\213\72\210\1\211\1\0\5\210\1\341\1\213\60\210"+
    "\21\0\1\342\102\0\1\210\1\0\2\210\22\0\1\210"+
    "\6\0\1\210\5\0\1\210\1\0\1\210\14\0\13\214"+
    "\1\0\5\214\1\0\1\216\1\343\71\214\1\215\1\0"+
    "\5\214\1\0\1\216\1\343\57\214\21\0\1\214\1\0"+
    "\2\214\22\0\1\214\6\0\1\214\5\0\1\214\1\0"+
    "\1\214\14\0\13\214\1\0\5\214\1\0\1\216\1\344"+
    "\57\214\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\13\17\2\345\17\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\22\17\1\346\11\17\13\0"+
    "\1\222\12\0\1\223\2\222\65\0\1\224\13\0\2\224"+
    "\1\0\1\347\51\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\3\17\1\350\30\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\11\17\1\351\16\17"+
    "\2\352\2\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\13\17\2\353\17\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\7\17\2\354\23\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\13\17\2\355\17\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\2\356\32\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\3\17\1\357\30\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\2\17\1\360\31\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\22\17\1\361\11\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\2\362\32\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\5\17\1\363\26\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\3\17\1\364\30\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\17\17\2\365"+
    "\13\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\5\17\1\366\26\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\21\17\1\367\12\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\5\17"+
    "\1\370\26\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\4\17\1\371\1\17\1\372\25\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\15\17"+
    "\2\373\15\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\4\17\1\374\27\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\7\17\2\375\23\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\23\17\2\376\7\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\377\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\5\17\1\u0100\14\17\1\u0101\2\u0102"+
    "\2\17\1\377\4\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\u0103"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\u0104\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\34\17\62\0\2\u0105\110\0"+
    "\1\u0106\63\0\1\u0107\110\0\1\u0108\16\0\2\u0109\64\0"+
    "\2\u010a\75\0\2\u010b\105\0\2\u010c\66\0\2\u010d\104\0"+
    "\1\u010e\101\0\1\u010f\122\0\1\u0110\60\0\2\u0111\106\0"+
    "\1\u0112\100\0\1\u0113\116\0\2\u0114\67\0\1\u0115\116\0"+
    "\1\u0116\66\0\1\u0117\101\0\1\u0118\1\0\1\u0119\111\0"+
    "\2\u011a\70\0\1\u011b\105\0\2\u011c\115\0\2\u011d\33\0"+
    "\1\u011e\27\0\1\u011f\14\0\1\u0120\2\u0121\2\0\1\u011e"+
    "\24\0\1\u0122\102\0\1\u0123\62\0\1\153\1\166\1\0"+
    "\1\321\1\322\1\323\1\153\4\323\2\0\1\323\1\u0124"+
    "\1\153\1\323\1\153\1\166\1\0\1\323\2\153\2\0"+
    "\3\323\2\166\1\153\1\166\1\323\3\153\2\166\1\153"+
    "\34\323\1\0\1\166\1\0\3\166\1\0\4\166\2\0"+
    "\1\166\1\324\1\0\1\166\1\0\1\166\1\0\1\166"+
    "\4\0\5\166\1\0\2\166\3\0\2\166\1\0\34\166"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\1\17"+
    "\1\u0125\1\17\1\u0125\2\0\1\17\1\164\1\0\1\u0125"+
    "\1\0\1\17\1\0\1\u0125\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\14\u0125\1\17\7\u0125\1\17\4\u0125"+
    "\1\17\2\u0125\12\0\1\327\5\0\1\u0126\73\0\1\u0127"+
    "\1\326\4\0\1\u0127\64\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\3\17\1\331\2\0\1\17\1\164\1\0"+
    "\1\332\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\34\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\2\17\1\333\1\u0128\2\0"+
    "\1\17\1\164\1\334\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\34\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\3\17"+
    "\1\u0128\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\12\0\1\u0129\101\0\1\334\1\u0129\4\0"+
    "\1\334\75\0\1\337\5\0\1\u012a\73\0\1\u012b\1\336"+
    "\4\0\1\u012b\63\0\21\342\1\u012c\1\u012d\60\342\13\u012e"+
    "\1\u012f\5\u012e\1\u012f\1\u0130\1\u0131\57\u012e\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\u0132\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\2\u0133"+
    "\32\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\u0134\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\11\17\1\u0135\22\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\2\17\1\u0136\31\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\7\17\2\u0137\23\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\6\17\1\u0138\25\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\23\17\2\u0139"+
    "\7\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\26\17\1\u013a\5\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\u013b\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\34\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\13\17\2\u013c\17\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\u013d\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\34\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\u013e\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\13\17\2\u013f\17\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\3\17\1\u0140\30\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\7\17\2\u0141\23\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\22\17\1\u0142\11\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\u0143\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\13\17"+
    "\2\u0144\17\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\u0145\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\23\17\2\u0146\7\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\21\17\1\u0147"+
    "\12\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\5\17\1\u0148\26\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\23\17\2\u0149\7\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\17\17"+
    "\2\u014a\13\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\17\17\2\u014b\13\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\15\17\2\u014c\15\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\17\17\2\u014d\13\17\20\0\1\u014e\131\0\2\u014f\52\0"+
    "\1\u0150\142\0\1\u0151\73\0\1\u0152\107\0\2\u0153\100\0"+
    "\1\u0154\117\0\2\u0155\104\0\1\u0156\25\0\1\u0157\144\0"+
    "\2\u0158\37\0\1\u0159\102\0\1\u015a\144\0\2\u015b\71\0"+
    "\1\u015c\106\0\2\u015d\114\0\1\u015e\31\0\1\u015f\144\0"+
    "\2\u0160\37\0\1\u0161\154\0\2\u0162\77\0\1\u0163\66\0"+
    "\1\u0164\120\0\2\u0165\75\0\2\u0166\101\0\2\u0167\77\0"+
    "\2\u0168\103\0\2\u0169\13\0\1\153\1\166\1\0\1\321"+
    "\2\323\1\153\4\323\2\0\1\323\1\u0124\1\153\1\323"+
    "\1\153\1\166\1\0\1\323\2\153\2\0\3\323\2\166"+
    "\1\153\1\166\1\323\3\153\2\166\1\153\34\323\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\1\17\1\u0125"+
    "\1\325\1\u0125\2\0\1\17\1\164\1\0\1\u0125\1\0"+
    "\1\17\1\0\1\u0125\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\14\u0125\1\17\7\u0125\1\17\4\u0125\1\17"+
    "\2\u0125\11\0\1\u0127\1\u016a\4\0\1\u0127\75\0\1\u016a"+
    "\101\0\1\u012b\1\u016b\4\0\1\u012b\75\0\1\u016b\70\0"+
    "\21\342\1\u016c\1\u012d\60\342\21\0\1\342\1\0\2\342"+
    "\22\0\1\342\6\0\1\342\5\0\1\342\1\0\1\342"+
    "\14\0\22\u012f\1\u016d\1\u016e\57\u012f\21\0\1\u012e\1\0"+
    "\2\u012e\22\0\1\u012e\6\0\1\u012e\5\0\1\u012e\1\0"+
    "\1\u012e\14\0\13\u012e\1\u012f\5\u012e\1\u012f\1\u0130\1\u016f"+
    "\57\u012e\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\4\17\1\u0170\27\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\4\17\1\u0171\27\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\17\17"+
    "\2\u0172\13\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\7\17\2\u0173\23\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\23\17\2\u0174\7\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\3\17\1\u0175\30\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\7\17\2\u0176\23\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\12\17\1\u0177"+
    "\21\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\7\17\2\u0178\23\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\11\17\1\u0179\22\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\7\17"+
    "\2\u017a\23\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\u017b\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\2\0\1\u017c\1\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\34\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\u017d\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\11\17"+
    "\1\u017e\22\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\32\17\1\u017f\1\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\u0180\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\34\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\17\17\2\u0181"+
    "\13\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\21\17\1\u0182\12\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\2\u0183\32\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\2\17\1\u0184"+
    "\31\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\7\17\2\u0185\23\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\23\17\2\u0186\7\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\23\17"+
    "\2\u0187\7\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\23\17\2\u0188\7\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\u0189\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\34\17\53\0\1\u018a"+
    "\102\0\1\u018b\115\0\2\u018c\71\0\2\u018d\115\0\2\u018e"+
    "\61\0\1\u018f\106\0\2\u0190\104\0\1\u0191\77\0\2\u0192"+
    "\103\0\1\u0193\100\0\2\u0194\43\0\1\u0195\111\0\1\u017c"+
    "\73\0\1\u0196\142\0\1\u0197\123\0\1\u0198\21\0\1\u0199"+
    "\150\0\2\u019a\103\0\1\u019b\61\0\2\u019c\103\0\1\u019d"+
    "\107\0\2\u019e\115\0\2\u019f\101\0\2\u01a0\101\0\2\u01a1"+
    "\27\0\1\u01a2\62\0\21\342\1\u01a3\1\u012d\60\342\21\0"+
    "\1\u012f\1\0\2\u012f\22\0\1\u012f\6\0\1\u012f\5\0"+
    "\1\u012f\1\0\1\u012f\14\0\22\u012f\1\u016d\1\u01a4\57\u012f"+
    "\13\u012e\1\u012f\5\u012e\1\u012f\1\u0130\1\343\57\u012e\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\23\17"+
    "\2\u01a5\7\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\25\17\1\u01a6\6\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\2\u01a7\32\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\2\17"+
    "\1\u01a8\31\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\17\17\2\u01a9\13\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\7\17\2\u01aa\23\17"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\u01ab\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\34\17\47\0\2\u01ac\33\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\17\17\2\u01ad\13\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\u01ae\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\34\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\7\17"+
    "\2\u01af\23\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\2\0\1\u01b0\1\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\34\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\2\u01b1\32\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\2\u01b2"+
    "\32\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\u01b3\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\34\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\32\17\1\u01b4\1\17\72\0\2\u01b5\103\0"+
    "\1\u01b6\55\0\2\u01b7\103\0\1\u01b8\117\0\2\u01b9\71\0"+
    "\2\u01ba\43\0\1\u01bb\150\0\2\u01bc\33\0\1\u01bd\140\0"+
    "\2\u01be\52\0\1\u01b0\122\0\2\u01bf\101\0\2\u01c0\52\0"+
    "\1\u01c1\163\0\1\u01c2\1\0\22\u012f\1\u016d\1\u01c3\57\u012f"+
    "\1\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\u01c4\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\27\17\1\u01c4\4\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\26\17\1\u01c5\5\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\11\17\1\u01c6"+
    "\22\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\7\17\2\u01c7\23\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\22\17\1\u01c8\11\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\17\17"+
    "\2\u01c9\13\17\51\0\1\u01ca\32\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\4\17\1\u01cb\27\17\24\0"+
    "\1\u01cc\51\0\1\u01cc\5\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\2\17\1\u01cd\31\17\1\0\1\17"+
    "\1\0\1\17\1\162\1\17\1\0\4\17\2\0\1\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\0\1\17\4\0"+
    "\5\17\1\0\2\17\3\0\2\17\1\0\30\17\2\u01ce"+
    "\2\17\1\0\1\17\1\0\1\17\1\162\1\17\1\0"+
    "\4\17\2\0\1\17\1\164\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\5\17\1\0\2\17\3\0\2\17"+
    "\1\0\17\17\2\u01cf\13\17\24\0\1\u01d0\51\0\1\u01d0"+
    "\101\0\1\u01d1\65\0\1\u01d2\100\0\2\u01d3\114\0\1\u01d4"+
    "\77\0\2\u01d5\66\0\1\u01d6\100\0\1\u01d7\130\0\2\u01d8"+
    "\70\0\2\u01d9\14\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\u01da\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\34\17\1\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\u01db"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\1\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\7\17\2\u01dc\23\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\11\17"+
    "\1\u01dd\22\17\1\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\11\17\1\u01de\22\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\3\17\1\u01df\30\17"+
    "\52\0\1\u01e0\124\0\1\u01e1\7\0\1\17\1\0\1\17"+
    "\1\162\1\17\1\0\4\17\2\0\1\17\1\164\1\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\5\17\1\0"+
    "\2\17\3\0\2\17\1\0\5\17\1\u01e2\26\17\1\0"+
    "\1\17\1\0\1\17\1\162\1\17\1\0\4\17\2\0"+
    "\1\17\1\164\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\4\0\5\17\1\0\2\17\3\0\2\17\1\0\2\17"+
    "\1\u01e3\31\17\20\0\1\u01e4\102\0\1\u01e5\140\0\2\u01e6"+
    "\103\0\1\u01e7\102\0\1\u01e8\74\0\1\u01e9\104\0\1\u01ea"+
    "\77\0\1\u01eb\32\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\12\17\1\u01ec\21\17\1\0\1\17\1\0"+
    "\1\17\1\162\1\17\1\0\4\17\2\0\1\17\1\164"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\4\0\5\17"+
    "\1\0\2\17\3\0\2\17\1\0\7\17\2\u01ed\23\17"+
    "\20\0\1\u01ee\63\0\1\17\1\0\1\17\1\162\1\17"+
    "\1\0\4\17\2\0\1\17\1\164\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\5\17\1\0\2\17\3\0"+
    "\2\17\1\0\5\17\1\u01ef\26\17\61\0\1\u01f0\77\0"+
    "\2\u01f1\77\0\1\u01f2\27\0\1\17\1\0\1\17\1\162"+
    "\1\17\1\0\4\17\2\0\1\17\1\164\1\0\1\u01f3"+
    "\1\0\1\17\1\0\1\17\4\0\5\17\1\0\2\17"+
    "\3\0\2\17\1\0\34\17\53\0\1\u01f4\47\0\1\u01f5"+
    "\63\0\1\17\1\0\1\17\1\162\1\17\1\0\4\17"+
    "\2\0\1\17\1\164\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\5\17\1\0\2\17\3\0\2\17\1\0"+
    "\13\17\2\u01f6\17\17\62\0\2\u01f7\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24723];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\13\1\1\0\42\1\1\11\2\1\3\11\1\1"+
    "\2\11\1\1\2\11\3\1\1\11\1\1\5\11\17\1"+
    "\1\11\23\1\1\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\11\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\1\3\0\1\11"+
    "\1\0\1\1\1\11\1\1\1\11\30\0\2\11\2\0"+
    "\2\11\30\0\1\11\4\1\2\0\4\1\4\0\3\1"+
    "\1\11\1\0\2\1\2\0\1\11\1\0\2\1\12\0"+
    "\1\1\22\0\2\11\12\0\1\11\20\0\1\1\2\0"+
    "\2\1\7\0\2\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\4\0\1\1\15\0\1\11\2\0\1\1\2\0"+
    "\1\1\2\0\1\11\4\0\1\1\15\0\2\1\3\0"+
    "\3\1\4\0\2\1\3\0\1\1\3\0\1\1\3\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\11\4\0\2\11"+
    "\3\0\1\11\2\0\1\11\3\0\1\11\2\0\2\11"+
    "\1\0\2\11\6\0\1\1\2\0\1\1\1\0\1\1"+
    "\4\0\1\1\5\0\1\11\1\0\1\11\1\0\1\11"+
    "\3\0\2\11\7\0\1\1\2\0\1\1\7\0\1\11"+
    "\1\0\1\11\1\0\3\1\2\0\1\1\1\0\1\11"+
    "\1\1\1\0\3\11\2\0\2\11\2\0\1\1\1\0"+
    "\1\1\1\0\2\11\1\0\1\11\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[503];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public StringBuffer lexeme = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(Token.ERROR, yytext());
          }
        case 81: break;
        case 2: 
          { return new Symbol(Token.LESS);
          }
        case 82: break;
        case 3: 
          { return new Symbol(Token.GREATER);
          }
        case 83: break;
        case 4: 
          { return new Symbol(Token.PNAME_NS, yytext());
          }
        case 84: break;
        case 5: 
          { return new Symbol(Token.SUB);
          }
        case 85: break;
        case 6: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER, yytext());
          }
        case 86: break;
        case 7: 
          { 
          }
        case 87: break;
        case 8: 
          { return new Symbol(Token.PERIOD);
          }
        case 88: break;
        case 9: 
          { return new Symbol(Token.PLUS);
          }
        case 89: break;
        case 10: 
          { return new Symbol(Token.LEFT_PARENTH);
          }
        case 90: break;
        case 11: 
          { return new Symbol(Token.RIGTH_PARENTH);
          }
        case 91: break;
        case 12: 
          { return new Symbol(Token.LEFT_CLASP);
          }
        case 92: break;
        case 13: 
          { return new Symbol(Token.RIGHT_CLASP);
          }
        case 93: break;
        case 14: 
          { return new Symbol(Token.EQUAL);
          }
        case 94: break;
        case 15: 
          { return new Symbol(Token.NOT);
          }
        case 95: break;
        case 16: 
          { return new Symbol(Token.MULT);
          }
        case 96: break;
        case 17: 
          { return new Symbol(Token.DIV);
          }
        case 97: break;
        case 18: 
          { return new Symbol(Token.LEFT_BRACE);
          }
        case 98: break;
        case 19: 
          { return new Symbol(Token.RIGHT_BRACE);
          }
        case 99: break;
        case 20: 
          { return new Symbol(Token.COMMA);
          }
        case 100: break;
        case 21: 
          { return new Symbol(Token.A);
          }
        case 101: break;
        case 22: 
          { yybegin(YYINITIAL);
          }
        case 102: break;
        case 23: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL, yytext());
          }
        case 103: break;
        case 24: 
          { yybegin(YYINITIAL);return new Symbol(Token.IRI_REF, yytext());
          }
        case 104: break;
        case 25: 
          { return new Symbol(Token.LET);
          }
        case 105: break;
        case 26: 
          { return new Symbol(Token.GET);
          }
        case 106: break;
        case 27: 
          { return new Symbol(Token.PNAME_LN, yytext());
          }
        case 107: break;
        case 28: 
          { return new Symbol(Token.VAR1, yytext());
          }
        case 108: break;
        case 29: 
          { return new Symbol(Token.VAR2, yytext());
          }
        case 109: break;
        case 30: 
          { return new Symbol(Token.LANGTAG, yytext());
          }
        case 110: break;
        case 31: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_NEGATIVE, yytext());
          }
        case 111: break;
        case 32: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_POSITIVE, yytext());
          }
        case 112: break;
        case 33: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL1, yytext());
          }
        case 113: break;
        case 34: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL2, yytext());
          }
        case 114: break;
        case 35: 
          { return new Symbol(Token.NIL, yytext());
          }
        case 115: break;
        case 36: 
          { return new Symbol(Token.ANON, yytext());
          }
        case 116: break;
        case 37: 
          { return new Symbol(Token.AND);
          }
        case 117: break;
        case 38: 
          { return new Symbol(Token.OR);
          }
        case 118: break;
        case 39: 
          { return new Symbol(Token.NOT_EQUAL);
          }
        case 119: break;
        case 40: 
          { yybegin(IRI_STATE);return new Symbol(Token.TYPE, yytext());
          }
        case 120: break;
        case 41: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_NEGATIVE, yytext());
          }
        case 121: break;
        case 42: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_POSITIVE, yytext());
          }
        case 122: break;
        case 43: 
          { return new Symbol(Token.ASC);
          }
        case 123: break;
        case 44: 
          { return new Symbol(Token.ASK);
          }
        case 124: break;
        case 45: 
          { return new Symbol(Token.STR);
          }
        case 125: break;
        case 46: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE, yytext());
          }
        case 126: break;
        case 47: 
          { return new Symbol(Token.BASE);
          }
        case 127: break;
        case 48: 
          { return new Symbol(Token.LANG);
          }
        case 128: break;
        case 49: 
          { return new Symbol(Token.TRUE);
          }
        case 129: break;
        case 50: 
          { return new Symbol(Token.FROM);
          }
        case 130: break;
        case 51: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_NEGATIVE, yytext());
          }
        case 131: break;
        case 52: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_POSITIVE, yytext());
          }
        case 132: break;
        case 53: 
          { return new Symbol(Token.BOUND);
          }
        case 133: break;
        case 54: 
          { return new Symbol(Token.NAMED);
          }
        case 134: break;
        case 55: 
          { return new Symbol(Token.LIMIT);
          }
        case 135: break;
        case 56: 
          { return new Symbol(Token.GRAPH);
          }
        case 136: break;
        case 57: 
          { return new Symbol(Token.FALSE);
          }
        case 137: break;
        case 58: 
          { return new Symbol(Token.REGEX);
          }
        case 138: break;
        case 59: 
          { return new Symbol(Token.UNION);
          }
        case 139: break;
        case 60: 
          { return new Symbol(Token.ISURI);
          }
        case 140: break;
        case 61: 
          { return new Symbol(Token.ISIRI);
          }
        case 141: break;
        case 62: 
          { return new Symbol(Token.WHERE);
          }
        case 142: break;
        case 63: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG1, yytext());
          }
        case 143: break;
        case 64: 
          { return new Symbol(Token.SELECT);
          }
        case 144: break;
        case 65: 
          { return new Symbol(Token.FILTER);
          }
        case 145: break;
        case 66: 
          { return new Symbol(Token.OFFSET);
          }
        case 146: break;
        case 67: 
          { return new Symbol(Token.PREFIX);
          }
        case 147: break;
        case 68: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG2, yytext());
          }
        case 148: break;
        case 69: 
          { return new Symbol(Token.REDUCED);
          }
        case 149: break;
        case 70: 
          { return new Symbol(Token.ISBLANK);
          }
        case 150: break;
        case 71: 
          { return new Symbol(Token.DESCRIBE);
          }
        case 151: break;
        case 72: 
          { return new Symbol(Token.DATATYPE);
          }
        case 152: break;
        case 73: 
          { return new Symbol(Token.DISTINCT);
          }
        case 153: break;
        case 74: 
          { return new Symbol(Token.SAMETERM);
          }
        case 154: break;
        case 75: 
          { return new Symbol(Token.ORDER_BY);
          }
        case 155: break;
        case 76: 
          { return new Symbol(Token.OPTIONAL);
          }
        case 156: break;
        case 77: 
          { return new Symbol(Token.CONSTRUCT);
          }
        case 157: break;
        case 78: 
          { return new Symbol(Token.ISLITERAL);
          }
        case 158: break;
        case 79: 
          { return new Symbol(Token.FROM_NAMED);
          }
        case 159: break;
        case 80: 
          { return new Symbol(Token.LANGMATCHES);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new Symbol(Token.END);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
