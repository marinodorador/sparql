/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package lexic;
import static lexic.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>SparqlFlex.flex</tt>
 */
public class Alex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_SYM = 2;
  public static final int PNAME_SYM = 4;
  public static final int IRI_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\30\1\13\1\14\1\14\1\13\22\2\1\27\1\43\1\23"+
    "\1\0\1\6\1\0\1\40\1\21\1\25\1\26\1\44\1\17\1\50"+
    "\1\11\1\16\1\45\12\12\1\4\1\51\1\1\1\42\1\3\1\5"+
    "\1\7\1\53\1\74\1\61\1\55\1\33\1\100\1\57\1\62\1\71"+
    "\1\10\1\77\1\56\1\54\1\52\1\64\1\73\1\10\1\65\1\63"+
    "\1\60\1\66\1\10\1\102\1\101\1\72\1\10\1\31\1\22\1\32"+
    "\1\37\1\35\1\2\1\75\1\24\2\10\1\20\1\103\2\10\1\67"+
    "\2\10\1\104\1\76\1\24\3\10\1\106\1\70\1\105\1\107\5\10"+
    "\1\46\1\41\1\47\7\0\1\15\61\0\1\36\10\0\27\34\1\0"+
    "\37\34\1\0\u0208\34\160\36\16\34\1\0\u1c81\34\14\0\2\34\32\0"+
    "\1\15\1\15\25\0\2\36\57\0\u0120\34\u0a70\0\u03f0\34\21\0\ua7ff\34"+
    "\u2100\0\u04d0\34\40\0\u020e\34\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\5\1\1\4\1\5\1\6"+
    "\1\7\1\10\2\1\1\11\1\12\1\6\1\13\1\14"+
    "\2\1\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\16\1\1\25\4\1\1\26\1\2\1\3\1\4"+
    "\1\7\1\10\1\11\1\12\1\26\1\13\1\14\3\26"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\16\26\1\25\4\26\1\27\17\26\1\25\4\26\1\1"+
    "\1\2\24\1\1\30\1\0\1\31\1\30\1\32\1\33"+
    "\1\34\1\30\1\35\1\30\1\36\1\30\1\37\2\0"+
    "\1\30\2\0\1\40\1\0\2\30\1\0\1\41\2\0"+
    "\1\30\1\42\2\0\1\30\1\0\1\43\1\0\1\44"+
    "\1\0\1\45\1\46\1\47\1\50\32\0\1\32\1\51"+
    "\70\0\3\52\2\0\3\53\1\42\1\0\2\43\1\0"+
    "\1\54\1\55\10\0\1\56\24\0\1\54\1\55\10\0"+
    "\1\56\24\0\1\54\1\55\10\0\1\56\23\0\1\37"+
    "\2\0\1\57\7\0\1\43\1\0\1\54\2\0\1\60"+
    "\20\0\1\61\1\0\1\62\3\0\1\63\1\0\1\54"+
    "\2\0\1\60\20\0\1\61\1\0\1\62\3\0\1\63"+
    "\1\0\1\54\2\0\1\60\20\0\1\61\1\0\1\62"+
    "\3\0\1\63\1\64\1\65\3\0\1\43\1\66\4\0"+
    "\1\67\1\70\6\0\1\71\1\72\1\0\1\73\1\74"+
    "\3\0\1\75\1\0\1\76\1\77\1\66\4\0\1\67"+
    "\1\70\6\0\1\71\1\72\1\0\1\73\1\74\3\0"+
    "\1\75\1\0\1\76\1\77\1\66\4\0\1\67\1\70"+
    "\6\0\1\71\1\72\1\0\1\73\1\74\3\0\1\75"+
    "\1\0\1\76\1\77\1\100\6\0\1\101\2\0\1\102"+
    "\4\0\1\103\1\104\5\0\1\101\1\0\1\102\4\0"+
    "\1\103\1\104\5\0\1\101\1\0\1\102\4\0\1\103"+
    "\1\104\1\105\7\0\1\106\1\0\1\107\7\0\1\106"+
    "\1\0\1\107\7\0\1\106\1\0\1\107\1\0\1\110"+
    "\1\111\1\112\2\0\1\113\1\114\1\0\1\115\1\110"+
    "\1\111\1\112\2\0\1\114\1\0\1\115\1\110\1\111"+
    "\1\112\2\0\1\114\1\0\1\115\1\0\1\116\1\117"+
    "\1\0\1\116\1\117\1\0\1\116\1\117\3\0\3\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u0120\0\u05a0\0\u05e8\0\u0120"+
    "\0\u0630\0\u0678\0\u0120\0\u06c0\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870"+
    "\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0"+
    "\0\u0318\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8"+
    "\0\u0c18\0\u0c18\0\u0c18\0\u0c18\0\u0c18\0\u03f0\0\u0c18\0\u0c18"+
    "\0\u0cf0\0\u0d38\0\u0d80\0\u0c18\0\u0dc8\0\u0c18\0\u0c18\0\u0c18"+
    "\0\u0c18\0\u0c18\0\u0c18\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170"+
    "\0\u11b8\0\u0c18\0\u1200\0\u1248\0\u1290\0\u12d8\0\u0c18\0\u1320"+
    "\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560"+
    "\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1320\0\u1758"+
    "\0\u17a0\0\u17e8\0\u1830\0\u0c18\0\u1878\0\u0d38\0\u0d80\0\u0e10"+
    "\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050"+
    "\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290"+
    "\0\u12d8\0\u0120\0\u18c0\0\u0c18\0\u1908\0\u18c0\0\u0c18\0\u1950"+
    "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90"+
    "\0\u0318\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8"+
    "\0\u2010\0\u2058\0\u20a0\0\u0c18\0\u20e8\0\u0c18\0\u0c18\0\u0c18"+
    "\0\u0c18\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0"+
    "\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520"+
    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u0c18\0\u0c18\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u1320"+
    "\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8"+
    "\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408"+
    "\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648"+
    "\0\u3690\0\u36d8\0\u3720\0\u1950\0\u3768\0\u1c20\0\u37b0\0\u37f8"+
    "\0\u3840\0\u3888\0\u1d88\0\u38d0\0\u3918\0\u0c18\0\u3960\0\u1f80"+
    "\0\u39a8\0\u39f0\0\u1b90\0\u1b90\0\u3a38\0\u3a80\0\u3ac8\0\u3b10"+
    "\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u1b90\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48"+
    "\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188"+
    "\0\u41d0\0\u0c18\0\u0c18\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338"+
    "\0\u4380\0\u43c8\0\u4410\0\u0c18\0\u4458\0\u44a0\0\u44e8\0\u4530"+
    "\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770"+
    "\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968\0\u49b0"+
    "\0\u1320\0\u1320\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60"+
    "\0\u4ba8\0\u4bf0\0\u1320\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58"+
    "\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98"+
    "\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148\0\u5190\0\u51d8"+
    "\0\u5220\0\u3888\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u39a8\0\u5388"+
    "\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580\0\u55c8"+
    "\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0\0\u5808"+
    "\0\u5850\0\u5898\0\u58e0\0\u5928\0\u5970\0\u59b8\0\u5a00\0\u1b90"+
    "\0\u5a48\0\u1b90\0\u5a90\0\u5ad8\0\u5b20\0\u1b90\0\u5b68\0\u5bb0"+
    "\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u5d18\0\u5d60\0\u5da8\0\u5df0"+
    "\0\u5e38\0\u5e80\0\u5ec8\0\u5f10\0\u5f58\0\u5fa0\0\u5fe8\0\u6030"+
    "\0\u6078\0\u60c0\0\u6108\0\u0c18\0\u6150\0\u0c18\0\u6198\0\u61e0"+
    "\0\u6228\0\u0c18\0\u6270\0\u62b8\0\u6300\0\u6348\0\u6390\0\u63d8"+
    "\0\u6420\0\u6468\0\u64b0\0\u64f8\0\u6540\0\u6588\0\u65d0\0\u6618"+
    "\0\u6660\0\u66a8\0\u66f0\0\u6738\0\u6780\0\u67c8\0\u6810\0\u1320"+
    "\0\u6858\0\u1320\0\u68a0\0\u68e8\0\u6930\0\u1320\0\u5220\0\u52b0"+
    "\0\u6978\0\u69c0\0\u6a08\0\u6a50\0\u1b90\0\u6a98\0\u6ae0\0\u6b28"+
    "\0\u6b70\0\u1b90\0\u1b90\0\u6bb8\0\u6c00\0\u6c48\0\u6c90\0\u6cd8"+
    "\0\u6d20\0\u1b90\0\u1b90\0\u6d68\0\u1b90\0\u1b90\0\u6db0\0\u6df8"+
    "\0\u6e40\0\u1b90\0\u6e88\0\u1b90\0\u1b90\0\u0c18\0\u6ed0\0\u6f18"+
    "\0\u6f60\0\u6fa8\0\u0c18\0\u0c18\0\u6ff0\0\u7038\0\u7080\0\u70c8"+
    "\0\u7110\0\u7158\0\u0c18\0\u0c18\0\u71a0\0\u0c18\0\u0c18\0\u71e8"+
    "\0\u7230\0\u7278\0\u0c18\0\u72c0\0\u0c18\0\u0c18\0\u1320\0\u7308"+
    "\0\u7350\0\u7398\0\u73e0\0\u1320\0\u1320\0\u7428\0\u7470\0\u74b8"+
    "\0\u7500\0\u7548\0\u7590\0\u1320\0\u1320\0\u75d8\0\u1320\0\u1320"+
    "\0\u7620\0\u7668\0\u76b0\0\u1320\0\u76f8\0\u1320\0\u1320\0\u0c18"+
    "\0\u7740\0\u7788\0\u77d0\0\u7818\0\u7860\0\u78a8\0\u1b90\0\u78f0"+
    "\0\u7938\0\u1b90\0\u7980\0\u79c8\0\u7a10\0\u7a58\0\u1b90\0\u1b90"+
    "\0\u7aa0\0\u7ae8\0\u7b30\0\u7b78\0\u7bc0\0\u0c18\0\u7c08\0\u0c18"+
    "\0\u7c50\0\u7c98\0\u7ce0\0\u7d28\0\u0c18\0\u0c18\0\u7d70\0\u7db8"+
    "\0\u7e00\0\u7e48\0\u7e90\0\u1320\0\u7ed8\0\u1320\0\u7f20\0\u7f68"+
    "\0\u7fb0\0\u7ff8\0\u1320\0\u1320\0\u0c18\0\u8040\0\u8088\0\u80d0"+
    "\0\u8118\0\u8160\0\u81a8\0\u81f0\0\u1b90\0\u8238\0\u1b90\0\u8280"+
    "\0\u82c8\0\u8310\0\u8358\0\u83a0\0\u83e8\0\u8430\0\u0c18\0\u8478"+
    "\0\u0c18\0\u84c0\0\u8508\0\u8550\0\u8598\0\u85e0\0\u8628\0\u8670"+
    "\0\u1320\0\u86b8\0\u1320\0\u8700\0\u1b90\0\u1b90\0\u1b90\0\u8748"+
    "\0\u8790\0\u0c18\0\u1b90\0\u87d8\0\u1b90\0\u0c18\0\u0c18\0\u0c18"+
    "\0\u8820\0\u8868\0\u0c18\0\u88b0\0\u0c18\0\u1320\0\u1320\0\u1320"+
    "\0\u88f8\0\u8940\0\u1320\0\u8988\0\u1320\0\u89d0\0\u1b90\0\u1b90"+
    "\0\u8a18\0\u0c18\0\u0c18\0\u8a60\0\u1320\0\u1320\0\u8aa8\0\u8af0"+
    "\0\u8b38\0\u1b90\0\u0c18\0\u1320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\0\1\20\1\21\1\14"+
    "\1\22\1\5\1\23\1\14\1\24\1\25\2\26\1\27"+
    "\1\30\2\14\3\5\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\14"+
    "\1\45\1\46\1\47\1\14\1\50\1\14\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\2\14\1\57\1\60\1\61"+
    "\2\14\1\62\1\14\1\63\1\64\1\14\1\65\2\14"+
    "\1\66\1\67\1\66\1\70\5\66\1\71\1\66\1\17"+
    "\2\0\1\72\1\73\5\66\1\74\1\75\2\76\1\77"+
    "\1\100\4\66\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\66"+
    "\1\116\1\117\1\120\1\66\1\121\1\66\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\2\66\1\130\1\131\1\132"+
    "\2\66\1\133\1\66\1\134\1\135\1\66\1\136\3\66"+
    "\1\67\1\66\1\70\1\137\3\66\1\140\1\71\1\66"+
    "\1\17\2\0\1\72\1\73\1\140\3\66\1\140\1\74"+
    "\1\75\2\17\1\77\1\100\2\140\3\66\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\141\1\142\1\140\1\143\1\144\1\145\1\140\1\146"+
    "\1\140\1\147\1\150\1\151\1\152\1\153\1\154\2\140"+
    "\1\155\1\156\1\157\2\140\1\160\1\140\1\161\1\162"+
    "\1\140\1\163\2\140\1\164\1\165\1\164\1\70\5\164"+
    "\1\71\1\164\1\17\2\0\1\72\1\73\5\164\1\74"+
    "\1\75\2\17\1\77\1\100\5\164\1\166\1\167\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\170"+
    "\1\171\1\164\1\172\1\173\1\174\1\164\1\175\1\164"+
    "\1\176\1\177\1\200\1\201\1\202\1\203\2\164\1\204"+
    "\1\205\1\132\2\164\1\206\1\164\1\207\1\210\1\164"+
    "\1\211\2\164\12\0\1\212\75\0\1\213\2\0\1\214"+
    "\6\213\1\215\2\0\5\213\2\0\3\213\2\0\6\213"+
    "\1\0\1\213\1\0\1\216\3\213\2\0\40\213\12\0"+
    "\1\212\27\0\1\217\55\0\1\220\1\0\1\221\5\0"+
    "\1\220\3\0\1\220\6\0\3\220\14\0\36\220\10\0"+
    "\1\222\1\0\1\223\5\0\1\222\3\0\1\222\6\0"+
    "\3\222\14\0\36\222\10\0\1\224\1\0\1\225\5\0"+
    "\1\224\3\0\1\224\6\0\3\224\14\0\36\224\10\0"+
    "\1\226\1\0\1\212\5\0\1\226\3\0\1\226\6\0"+
    "\1\226\16\0\36\226\4\0\1\227\3\0\2\230\1\231"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\36\230\12\233\1\234\3\0\1\235\71\233\12\212"+
    "\1\16\3\0\1\236\1\212\1\237\12\212\1\237\54\212"+
    "\13\0\1\17\13\0\2\17\71\0\1\236\75\0\12\240"+
    "\1\241\3\0\1\242\71\240\12\243\1\244\1\0\5\243"+
    "\1\245\1\246\65\243\12\247\1\250\1\0\5\247\1\0"+
    "\1\251\1\252\64\247\12\0\1\212\1\253\12\0\1\254"+
    "\2\253\71\0\1\212\1\17\13\0\2\17\71\0\1\212"+
    "\1\255\13\0\2\255\1\0\1\256\67\0\1\212\25\0"+
    "\1\257\61\0\1\212\26\0\1\260\60\0\1\212\27\0"+
    "\1\261\51\0\1\227\3\0\2\230\1\231\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\1\230"+
    "\1\262\34\230\4\0\1\227\3\0\2\230\1\231\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\11\230\1\263\24\230\4\0\1\227\3\0\2\230\1\231"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\1\264"+
    "\3\230\13\0\1\230\1\265\15\230\1\266\16\230\4\0"+
    "\1\227\3\0\2\230\1\231\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\1\230\1\267\15\230"+
    "\1\270\16\230\4\0\1\227\3\0\2\230\1\231\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\13\230\1\271\22\230\4\0\1\227\3\0\2\230\1\231"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\12\230\1\272\23\230\4\0\1\227\3\0\2\230"+
    "\1\231\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\1\273\3\230\13\0\6\230\1\274\27\230\4\0\1\227"+
    "\3\0\2\230\1\231\3\0\1\232\1\0\1\230\3\0"+
    "\1\230\6\0\4\230\13\0\13\230\1\275\5\230\1\276"+
    "\4\230\1\277\7\230\4\0\1\227\3\0\2\230\1\231"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\1\300"+
    "\3\230\13\0\36\230\4\0\1\227\3\0\2\230\1\231"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\1\301\35\230\4\0\1\227\3\0\2\230\1\231"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\16\230\1\302\17\230\4\0\1\227\3\0\2\230"+
    "\1\231\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\23\230\1\303\12\230\4\0\1\227\3\0"+
    "\2\230\1\231\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\13\230\1\304\22\230\4\0\1\227"+
    "\3\0\2\230\1\231\3\0\1\232\1\0\1\230\3\0"+
    "\1\230\6\0\4\230\13\0\1\230\1\305\10\230\1\306"+
    "\23\230\4\0\1\227\3\0\2\230\1\231\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\13\230"+
    "\1\307\3\230\1\310\16\230\4\0\1\227\3\0\2\230"+
    "\1\231\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\10\230\1\311\25\230\4\0\1\227\3\0"+
    "\2\230\1\231\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\23\230\1\312\12\230\4\0\1\227"+
    "\3\0\2\230\1\231\3\0\1\232\1\0\1\230\3\0"+
    "\1\230\6\0\4\230\13\0\34\230\1\313\1\230\152\0"+
    "\1\314\107\0\1\217\104\0\1\315\110\0\1\257\110\0"+
    "\1\260\110\0\1\261\120\0\1\316\117\0\1\317\57\0"+
    "\1\320\17\0\1\321\15\0\1\322\71\0\1\323\15\0"+
    "\1\324\103\0\1\325\106\0\1\326\56\0\1\327\24\0"+
    "\1\330\114\0\1\331\5\0\1\332\4\0\1\333\42\0"+
    "\1\334\126\0\1\335\125\0\1\336\114\0\1\337\77\0"+
    "\1\340\75\0\1\341\10\0\1\342\110\0\1\343\3\0"+
    "\1\344\100\0\1\345\122\0\1\346\120\0\1\347\5\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\36\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\4\350\13\0\1\350\1\352\34\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\4\350\13\0\11\350\1\353\24\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\1\354\3\350\13\0\1\350\1\355\15\350\1\356\16\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\1\350\1\357\15\350"+
    "\1\360\16\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\13\350"+
    "\1\361\22\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\12\350"+
    "\1\362\23\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\1\363\3\350\13\0"+
    "\6\350\1\364\27\350\4\0\1\137\3\0\3\350\3\0"+
    "\1\351\1\0\1\350\3\0\1\350\6\0\4\350\13\0"+
    "\13\350\1\365\5\350\1\366\4\350\1\367\7\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\1\370\3\350\13\0\36\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\1\371\35\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\4\350\13\0\16\350\1\372\17\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\4\350\13\0\23\350\1\373\12\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\4\350\13\0\13\350\1\374\22\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\4\350\13\0\1\350\1\375\10\350\1\376\23\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\13\350\1\377\3\350\1\u0100"+
    "\16\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\10\350\1\u0101"+
    "\25\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\23\350\1\u0102"+
    "\12\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\34\350\1\u0103"+
    "\1\350\1\213\2\0\1\214\7\213\2\0\5\213\2\0"+
    "\3\213\2\0\6\213\1\0\1\213\1\0\1\216\3\213"+
    "\2\0\41\213\2\0\1\214\7\213\2\0\5\213\2\0"+
    "\3\213\2\0\6\213\1\0\1\213\1\0\4\213\2\0"+
    "\41\213\2\0\1\214\6\213\1\215\2\0\5\213\2\0"+
    "\3\213\2\0\6\213\1\0\1\213\1\0\4\213\2\0"+
    "\40\213\10\0\3\220\3\0\1\u0104\1\0\1\220\3\0"+
    "\1\220\6\0\4\220\13\0\36\220\10\0\2\220\1\221"+
    "\3\0\1\u0104\1\0\1\220\3\0\1\220\6\0\4\220"+
    "\13\0\36\220\10\0\1\222\1\0\1\222\5\0\1\222"+
    "\3\0\1\222\6\0\4\222\13\0\36\222\10\0\1\222"+
    "\1\0\1\223\5\0\1\222\3\0\1\222\6\0\4\222"+
    "\13\0\36\222\10\0\1\224\1\0\1\224\5\0\1\224"+
    "\3\0\1\224\6\0\4\224\13\0\36\224\10\0\1\224"+
    "\1\0\1\225\5\0\1\224\3\0\1\224\6\0\4\224"+
    "\13\0\36\224\10\0\1\226\1\u0105\6\0\1\226\3\0"+
    "\1\226\6\0\1\226\16\0\36\226\10\0\1\220\1\0"+
    "\1\220\5\0\1\220\3\0\1\220\6\0\3\220\14\0"+
    "\36\220\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\36\230\10\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\36\230\12\0\1\u0106\75\0\12\u0106\1\234"+
    "\3\0\1\u0107\1\u0106\1\u0108\12\u0106\1\u0108\54\u0106\12\0"+
    "\1\u0107\107\0\1\236\5\0\1\u0109\12\0\1\u0109\65\0"+
    "\1\u010a\1\212\4\0\1\u010a\102\0\1\u010b\75\0\12\u010b"+
    "\1\241\3\0\1\u010c\1\u010b\1\u010d\12\u010b\1\u010d\54\u010b"+
    "\12\0\1\u010c\75\0\13\243\1\0\5\243\1\u010e\1\246"+
    "\77\243\1\244\1\0\5\243\1\u010e\1\246\65\243\21\0"+
    "\1\u010f\107\0\1\243\1\0\2\243\56\0\1\243\1\0"+
    "\2\243\1\0\13\247\1\0\5\247\1\0\1\251\1\u0110"+
    "\76\247\1\250\1\0\5\247\1\0\1\251\1\u0110\64\247"+
    "\21\0\1\247\1\0\2\247\56\0\1\247\1\0\2\247"+
    "\1\0\13\247\1\0\5\247\1\0\1\251\1\u0111\64\247"+
    "\13\0\1\253\12\0\1\254\2\253\72\0\1\255\13\0"+
    "\2\255\1\0\1\256\61\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\2\230\1\u0112\33\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\7\230\1\u0113\15\230\1\u0114\10\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\11\230\1\u0115\24\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\6\230\1\u0116\27\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\11\230\1\u0117\24\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\1\u0118\35\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\2\230\1\u0119\33\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\1\230\1\u011a\34\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\1\u011b\35\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\4\230\1\u011c\31\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\13\230\1\u011d\22\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\3\230\1\u011e\32\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\6\230\1\u011f\27\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\26\230\1\u0120\7\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\3\230\1\u0121\1\230\1\u0122\30\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\17\230\1\u0123\16\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\4\230\1\u0124\7\230\1\u0125\2\230\1\u0126"+
    "\2\230\1\u0127\13\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\24\230\1\u0128\11\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\1\u0129\3\230"+
    "\13\0\36\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\11\230"+
    "\1\u012a\24\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\14\230"+
    "\1\u012b\21\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\12\230"+
    "\1\u012c\23\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\4\230"+
    "\1\u012d\31\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\1\u012e\3\230\13\0"+
    "\36\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\32\230\1\u012f"+
    "\3\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\35\230\1\u0130"+
    "\54\0\1\u0131\114\0\1\u0132\15\0\1\u0133\73\0\1\u0134"+
    "\104\0\1\u0135\112\0\1\u0136\76\0\1\u0137\111\0\1\u0138"+
    "\106\0\1\u0139\106\0\1\u013a\113\0\1\u013b\116\0\1\u013c"+
    "\77\0\1\u013d\112\0\1\u013e\127\0\1\u013f\64\0\1\u0140"+
    "\1\0\1\u0141\121\0\1\u0142\74\0\1\u0143\7\0\1\u0144"+
    "\2\0\1\u0145\2\0\1\u0146\111\0\1\u0147\44\0\1\u0148"+
    "\137\0\1\u0149\112\0\1\u014a\105\0\1\u014b\101\0\1\u014c"+
    "\64\0\1\u014d\160\0\1\u014e\112\0\1\u014f\10\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\36\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\2\350"+
    "\1\u0150\33\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\7\350"+
    "\1\u0151\15\350\1\u0152\10\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\11\350\1\u0153\24\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\6\350\1\u0154\27\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\11\350\1\u0155\24\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\1\u0156\35\350\4\0\1\137\3\0\3\350\3\0"+
    "\1\351\1\0\1\350\3\0\1\350\6\0\4\350\13\0"+
    "\2\350\1\u0157\33\350\4\0\1\137\3\0\3\350\3\0"+
    "\1\351\1\0\1\350\3\0\1\350\6\0\4\350\13\0"+
    "\1\350\1\u0158\34\350\4\0\1\137\3\0\3\350\3\0"+
    "\1\351\1\0\1\350\3\0\1\350\6\0\4\350\13\0"+
    "\1\u0159\35\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\4\350"+
    "\1\u015a\31\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\13\350"+
    "\1\u015b\22\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\3\350"+
    "\1\u015c\32\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\6\350"+
    "\1\u015d\27\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\26\350"+
    "\1\u015e\7\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\3\350"+
    "\1\u015f\1\350\1\u0160\30\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\17\350\1\u0161\16\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\4\350\1\u0162\7\350\1\u0163\2\350\1\u0164\2\350"+
    "\1\u0165\13\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\24\350"+
    "\1\u0166\11\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\1\u0167\3\350\13\0"+
    "\36\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\11\350\1\u0168"+
    "\24\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\14\350\1\u0169"+
    "\21\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\12\350\1\u016a"+
    "\23\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\4\350\1\u016b"+
    "\31\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\1\u016c\3\350\13\0\36\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\32\350\1\u016d\3\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\35\350\1\u016e\10\0"+
    "\1\u016f\1\0\1\u016f\5\0\1\u016f\3\0\1\u016f\6\0"+
    "\1\u016f\16\0\36\u016f\12\0\1\u0107\5\0\1\u0170\12\0"+
    "\1\u0170\65\0\1\u0171\1\u0106\4\0\1\u0171\101\0\1\u010a"+
    "\1\u0172\4\0\1\u010a\102\0\1\u0172\107\0\1\u010c\5\0"+
    "\1\u0173\12\0\1\u0173\65\0\1\u0174\1\u010b\4\0\1\u0174"+
    "\70\0\21\u010f\1\u0175\1\u0176\65\u010f\13\u0177\1\u0178\5\u0177"+
    "\1\u0178\1\u0179\1\u017a\64\u0177\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\1\u017b"+
    "\3\230\13\0\36\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\7\230\1\u017c\26\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\1\230\1\u017d\34\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\6\230\1\u017e\27\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\5\230\1\u017f\30\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\17\230\1\u0180\16\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\21\230\1\u0181\14\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\11\230\1\u0182\24\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\1\u0183\3\230"+
    "\13\0\36\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\1\u0184\3\230\13\0"+
    "\36\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\17\230\1\u0185"+
    "\16\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\11\230\1\u0186"+
    "\24\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\14\230\1\u0187"+
    "\21\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\1\u0188\3\230\13\0\36\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\12\230\1\u0189\23\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\17\230\1\u018a\16\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\13\230\1\u018b\22\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\13\230\1\u018c\22\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\4\230\1\u018d\31\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\u018e"+
    "\3\0\1\230\6\0\4\230\13\0\36\230\4\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\26\230\1\u018f\7\230\4\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\1\u0190\3\230\13\0\36\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\4\230\13\0\1\u0191\35\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\2\230\1\u0192\33\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\6\230\1\u0193\27\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\13\230\1\u0194\22\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\16\230\1\u0195\17\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\u0196\3\0\1\230\6\0\4\230"+
    "\13\0\36\230\33\0\1\u0197\135\0\1\u0198\101\0\1\u0199"+
    "\114\0\1\u019a\106\0\1\u019b\121\0\1\u019c\111\0\1\u019d"+
    "\77\0\1\u019e\57\0\1\u019f\107\0\1\u01a0\145\0\1\u01a1"+
    "\101\0\1\u01a2\112\0\1\u01a3\54\0\1\u01a4\140\0\1\u01a5"+
    "\114\0\1\u01a6\103\0\1\u01a7\107\0\1\u01a8\100\0\1\u01a9"+
    "\51\0\1\u01aa\167\0\1\u01ab\42\0\1\u01ac\126\0\1\u01ad"+
    "\111\0\1\u01ae\113\0\1\u01af\114\0\1\u01b0\112\0\1\u01b1"+
    "\37\0\1\u01b2\73\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\1\u01b3\3\350\13\0"+
    "\36\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\7\350\1\u01b4"+
    "\26\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\1\350\1\u01b5"+
    "\34\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\6\350\1\u01b6"+
    "\27\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\5\350\1\u01b7"+
    "\30\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\17\350\1\u01b8"+
    "\16\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\21\350\1\u01b9"+
    "\14\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\11\350\1\u01ba"+
    "\24\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\1\u01bb\3\350\13\0\36\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\1\u01bc\3\350\13\0\36\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\17\350\1\u01bd\16\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\11\350\1\u01be\24\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\14\350\1\u01bf\21\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\1\u01c0\3\350\13\0\36\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\12\350\1\u01c1\23\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\17\350\1\u01c2\16\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\13\350\1\u01c3\22\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\13\350\1\u01c4\22\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\4\350\1\u01c5\31\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\u01c6\3\0\1\350"+
    "\6\0\4\350\13\0\36\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\26\350\1\u01c7\7\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\1\u01c8"+
    "\3\350\13\0\36\350\4\0\1\137\3\0\3\350\3\0"+
    "\1\351\1\0\1\350\3\0\1\350\6\0\4\350\13\0"+
    "\1\u01c9\35\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\2\350"+
    "\1\u01ca\33\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\6\350"+
    "\1\u01cb\27\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\13\350"+
    "\1\u01cc\22\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\16\350"+
    "\1\u01cd\17\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\u01ce\3\0\1\350\6\0\4\350\13\0\36\350"+
    "\10\0\1\u016f\1\u0105\1\u016f\5\0\1\u016f\3\0\1\u016f"+
    "\6\0\1\u016f\16\0\36\u016f\11\0\1\u0171\1\u01cf\4\0"+
    "\1\u0171\102\0\1\u01cf\106\0\1\u0174\1\u01d0\4\0\1\u0174"+
    "\102\0\1\u01d0\75\0\21\u010f\1\u01d1\1\u0176\65\u010f\21\0"+
    "\1\u010f\1\0\2\u010f\56\0\1\u010f\1\0\2\u010f\1\0"+
    "\22\u0178\1\u01d2\1\u01d3\64\u0178\21\0\1\u0177\1\0\2\u0177"+
    "\56\0\1\u0177\1\0\2\u0177\1\0\13\u0177\1\u0178\5\u0177"+
    "\1\u0178\1\u0179\1\u01d4\64\u0177\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\3\230\1\u01d5\32\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\13\230\1\u01d6\22\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\6\230\1\u01d7\27\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\17\230\1\u01d8\16\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\2\230\1\u01d9\33\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\6\230\1\u01da\27\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\10\230\1\u01db\25\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\6\230\1\u01dc\27\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\7\230\1\u01dd\26\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\13\230\1\u01de\22\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\12\230\1\u01df\23\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\1\u01e0"+
    "\3\230\13\0\36\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\7\230\1\u01e1\26\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\27\230\1\u01e2\6\230\4\0\1\227\3\0\3\230\3\0"+
    "\1\232\1\0\1\230\3\0\1\230\6\0\4\230\13\0"+
    "\1\u01e3\35\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\6\230"+
    "\1\u01e4\27\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\17\230"+
    "\1\u01e5\16\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\17\230"+
    "\1\u01e6\16\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\1\230"+
    "\1\u01e7\34\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\6\230"+
    "\1\u01e8\27\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\17\230"+
    "\1\u01e9\16\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\3\230"+
    "\1\u01ea\32\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\1\u01eb\3\230\13\0"+
    "\36\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\1\u01ec\3\230\13\0\36\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\u01ed"+
    "\3\0\1\230\6\0\4\230\13\0\36\230\55\0\1\u01ee"+
    "\117\0\1\u01ef\102\0\1\u01f0\120\0\1\u01f1\72\0\1\u01f2"+
    "\113\0\1\u01f3\111\0\1\u01f4\105\0\1\u01f5\110\0\1\u01f6"+
    "\113\0\1\u01f7\106\0\1\u01f8\56\0\1\u01f9\135\0\1\u01fa"+
    "\127\0\1\u01fb\60\0\1\u01fc\115\0\1\u01fd\120\0\1\u01fe"+
    "\107\0\1\u01ff\71\0\1\u0200\114\0\1\u0201\120\0\1\u0202"+
    "\73\0\1\u0203\65\0\1\u0204\107\0\1\u0205\74\0\1\u0206"+
    "\73\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\3\350\1\u0207\32\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\13\350\1\u0208\22\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\6\350\1\u0209\27\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\17\350\1\u020a\16\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\2\350\1\u020b\33\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\6\350\1\u020c\27\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\10\350\1\u020d\25\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\6\350\1\u020e\27\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\7\350\1\u020f\26\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\13\350\1\u0210\22\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\12\350\1\u0211\23\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\1\u0212\3\350\13\0\36\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\7\350\1\u0213\26\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\27\350\1\u0214\6\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\4\350\13\0\1\u0215\35\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\6\350\1\u0216\27\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\17\350\1\u0217\16\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\17\350\1\u0218\16\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\1\350\1\u0219\34\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\6\350\1\u021a\27\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\17\350\1\u021b\16\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\3\350\1\u021c\32\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\1\u021d\3\350\13\0\36\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\1\u021e\3\350\13\0\36\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\u021f\3\0\1\350\6\0\4\350"+
    "\13\0\36\350\21\u010f\1\u0220\1\u0176\65\u010f\21\0\1\u0178"+
    "\1\0\2\u0178\56\0\1\u0178\1\0\2\u0178\1\0\22\u0178"+
    "\1\u01d2\1\u0221\64\u0178\13\u0177\1\u0178\5\u0177\1\u0178\1\u0179"+
    "\1\u0110\64\u0177\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\17\230"+
    "\1\u0222\16\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\20\230"+
    "\1\u0223\15\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\1\u0224"+
    "\35\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\1\230\1\u0225"+
    "\34\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\13\230\1\u0226"+
    "\22\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\6\230\1\u0227"+
    "\27\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\2\0\1\u0228\3\0\4\230\13\0"+
    "\36\230\4\0\1\227\3\0\3\230\3\0\1\232\1\0"+
    "\1\230\3\0\1\230\6\0\4\230\13\0\1\u0229\35\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\6\230\1\u022a\27\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\1\u022b\3\230\13\0\36\230\4\0"+
    "\1\227\3\0\3\230\3\0\1\232\1\0\1\230\3\0"+
    "\1\230\6\0\1\u022c\3\230\13\0\36\230\4\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\1\u022d\35\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\1\u022e\3\230\13\0\36\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\27\230\1\u022f\6\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\13\230\1\u0230\22\230\71\0\1\u0231\110\0\1\u0232"+
    "\67\0\1\u0233\110\0\1\u0234\121\0\1\u0235\102\0\1\u0236"+
    "\56\0\1\u0228\132\0\1\u0237\115\0\1\u0238\62\0\1\u0239"+
    "\107\0\1\u023a\126\0\1\u023b\70\0\1\u023c\155\0\1\u023d"+
    "\73\0\1\u023e\26\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\17\350"+
    "\1\u023f\16\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\20\350"+
    "\1\u0240\15\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\1\u0241"+
    "\35\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\1\350\1\u0242"+
    "\34\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\13\350\1\u0243"+
    "\22\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\6\350\1\u0244"+
    "\27\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\2\0\1\u0228\3\0\4\350\13\0"+
    "\36\350\4\0\1\137\3\0\3\350\3\0\1\351\1\0"+
    "\1\350\3\0\1\350\6\0\4\350\13\0\1\u0245\35\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\4\350\13\0\6\350\1\u0246\27\350"+
    "\4\0\1\137\3\0\3\350\3\0\1\351\1\0\1\350"+
    "\3\0\1\350\6\0\1\u0247\3\350\13\0\36\350\4\0"+
    "\1\137\3\0\3\350\3\0\1\351\1\0\1\350\3\0"+
    "\1\350\6\0\1\u0248\3\350\13\0\36\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\1\u0249\35\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\1\u024a\3\350\13\0\36\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\27\350\1\u024b\6\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\13\350\1\u024c\22\350\22\u0178\1\u01d2\1\u024d\64\u0178"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\22\230\1\u024e\13\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\21\230\1\u024f\14\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\7\230\1\u0250\26\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\6\230\1\u0251\27\230"+
    "\4\0\1\227\3\0\3\230\3\0\1\232\1\0\1\230"+
    "\3\0\1\230\6\0\4\230\13\0\14\230\1\u0252\21\230"+
    "\74\0\1\u0253\17\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\1\230"+
    "\1\u0254\34\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\3\230"+
    "\1\u0255\32\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\13\230"+
    "\1\u0256\22\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\25\230"+
    "\1\u0257\10\230\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\13\230"+
    "\1\u0258\22\230\74\0\1\u0259\106\0\1\u025a\75\0\1\u025b"+
    "\106\0\1\u025c\115\0\1\u025d\74\0\1\u025e\111\0\1\u025f"+
    "\117\0\1\u0260\121\0\1\u0261\75\0\1\u0262\26\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\22\350\1\u0263\13\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\21\350\1\u0264\14\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\7\350\1\u0265\26\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\6\350\1\u0266\27\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\14\350\1\u0267\21\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\1\350\1\u0268\34\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\3\350\1\u0269\32\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\13\350\1\u026a\22\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\25\350\1\u026b\10\350\4\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\4\350\13\0\13\350\1\u026c\22\350\4\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\1\u026d\3\230\13\0\36\230\4\0\1\227\3\0"+
    "\3\230\3\0\1\232\1\0\1\230\3\0\1\230\6\0"+
    "\1\u026e\3\230\13\0\36\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\6\230\1\u026f\27\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\7\230\1\u0270\26\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\7\230\1\u0271\26\230\72\0\1\u0272\21\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\4\230\1\u0273\31\230\4\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\1\230\1\u0274\34\230\4\0\1\227"+
    "\3\0\3\230\3\0\1\232\1\0\1\230\3\0\1\230"+
    "\6\0\4\230\13\0\2\230\1\u0275\33\230\33\0\1\u0276"+
    "\107\0\1\u0277\134\0\1\u0278\110\0\1\u0279\107\0\1\u027a"+
    "\104\0\1\u027b\104\0\1\u027c\110\0\1\u027d\37\0\1\137"+
    "\3\0\3\350\3\0\1\351\1\0\1\350\3\0\1\350"+
    "\6\0\1\u027e\3\350\13\0\36\350\4\0\1\137\3\0"+
    "\3\350\3\0\1\351\1\0\1\350\3\0\1\350\6\0"+
    "\1\u027f\3\350\13\0\36\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\6\350\1\u0280\27\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\7\350\1\u0281\26\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\7\350\1\u0282\26\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\4\350\1\u0283\31\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\1\350\1\u0284\34\350\4\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\2\350\1\u0285\33\350\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\10\230\1\u0286\25\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\6\230\1\u0287\27\230\4\0\1\227\3\0\3\230"+
    "\3\0\1\232\1\0\1\230\3\0\1\230\6\0\4\230"+
    "\13\0\4\230\1\u0288\31\230\62\0\1\u0289\105\0\1\u028a"+
    "\105\0\1\u028b\35\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\10\350"+
    "\1\u028c\25\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\6\350"+
    "\1\u028d\27\350\4\0\1\137\3\0\3\350\3\0\1\351"+
    "\1\0\1\350\3\0\1\350\6\0\4\350\13\0\4\350"+
    "\1\u028e\31\350\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\1\u028f\3\230\13\0"+
    "\36\230\33\0\1\u0290\60\0\1\137\3\0\3\350\3\0"+
    "\1\351\1\0\1\350\3\0\1\350\6\0\1\u0291\3\350"+
    "\13\0\36\350\4\0\1\227\3\0\3\230\3\0\1\232"+
    "\1\0\1\230\3\0\1\230\6\0\4\230\13\0\11\230"+
    "\1\u0292\24\230\63\0\1\u0293\30\0\1\137\3\0\3\350"+
    "\3\0\1\351\1\0\1\350\3\0\1\350\6\0\4\350"+
    "\13\0\11\350\1\u0294\24\350";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\61\1\1\11\2\1\5\11\1\1\2\11\3\1"+
    "\1\11\1\1\6\11\16\1\1\11\4\1\1\11\24\1"+
    "\1\11\26\1\1\0\1\11\2\1\1\11\7\1\2\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\1\1\2\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\11\1\0"+
    "\4\11\32\0\2\11\70\0\3\1\2\0\3\1\1\11"+
    "\1\0\2\1\1\0\2\1\10\0\1\1\24\0\2\11"+
    "\10\0\1\11\24\0\2\1\10\0\1\1\23\0\1\1"+
    "\2\0\1\1\7\0\1\1\1\0\1\1\2\0\1\1"+
    "\20\0\1\1\1\0\1\1\3\0\1\1\1\0\1\1"+
    "\2\0\1\1\20\0\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\1\2\0\1\1\20\0\1\1\1\0\1\1"+
    "\3\0\3\1\3\0\2\1\4\0\2\1\6\0\2\1"+
    "\1\0\2\1\3\0\1\1\1\0\2\1\1\11\4\0"+
    "\2\11\6\0\2\11\1\0\2\11\3\0\1\11\1\0"+
    "\2\11\1\1\4\0\2\1\6\0\2\1\1\0\2\1"+
    "\3\0\1\1\1\0\2\1\1\11\6\0\1\1\2\0"+
    "\1\1\4\0\2\1\5\0\1\11\1\0\1\11\4\0"+
    "\2\11\5\0\1\1\1\0\1\1\4\0\2\1\1\11"+
    "\7\0\1\1\1\0\1\1\7\0\1\11\1\0\1\11"+
    "\7\0\1\1\1\0\1\1\1\0\3\1\2\0\1\11"+
    "\1\1\1\0\1\1\3\11\2\0\1\11\1\0\1\11"+
    "\3\1\2\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\11\1\0\2\1\3\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public StringBuffer lexeme = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Alex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(Token.ERROR, yytext());
          }
        case 81: break;
        case 2: 
          { return new Symbol(Token.LESS);
          }
        case 82: break;
        case 3: 
          { return new Symbol(Token.GREATER);
          }
        case 83: break;
        case 4: 
          { return new Symbol(Token.SUB);
          }
        case 84: break;
        case 5: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER, yytext());
          }
        case 85: break;
        case 6: 
          { 
          }
        case 86: break;
        case 7: 
          { return new Symbol(Token.PERIOD);
          }
        case 87: break;
        case 8: 
          { return new Symbol(Token.PLUS);
          }
        case 88: break;
        case 9: 
          { return new Symbol(Token.LEFT_PARENTH);
          }
        case 89: break;
        case 10: 
          { return new Symbol(Token.RIGTH_PARENTH);
          }
        case 90: break;
        case 11: 
          { return new Symbol(Token.LEFT_CLASP);
          }
        case 91: break;
        case 12: 
          { return new Symbol(Token.RIGHT_CLASP);
          }
        case 92: break;
        case 13: 
          { return new Symbol(Token.EQUAL);
          }
        case 93: break;
        case 14: 
          { return new Symbol(Token.NOT);
          }
        case 94: break;
        case 15: 
          { return new Symbol(Token.MULT);
          }
        case 95: break;
        case 16: 
          { return new Symbol(Token.DIV);
          }
        case 96: break;
        case 17: 
          { return new Symbol(Token.LEFT_BRACE);
          }
        case 97: break;
        case 18: 
          { return new Symbol(Token.RIGHT_BRACE);
          }
        case 98: break;
        case 19: 
          { return new Symbol(Token.COMMA);
          }
        case 99: break;
        case 20: 
          { return new Symbol(Token.SEMI);
          }
        case 100: break;
        case 21: 
          { return new Symbol(Token.A);
          }
        case 101: break;
        case 22: 
          { yybegin(YYINITIAL);
          }
        case 102: break;
        case 23: 
          { yybegin(IRI_STATE);return new Symbol(Token.PNAME_NS, yytext());
          }
        case 103: break;
        case 24: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL, yytext());
          }
        case 104: break;
        case 25: 
          { yybegin(YYINITIAL);return new Symbol(Token.IRI_REF, yytext());
          }
        case 105: break;
        case 26: 
          { return new Symbol(Token.LET);
          }
        case 106: break;
        case 27: 
          { return new Symbol(Token.GET);
          }
        case 107: break;
        case 28: 
          { return new Symbol(Token.PNAME_LN, yytext());
          }
        case 108: break;
        case 29: 
          { return new Symbol(Token.VAR1, yytext());
          }
        case 109: break;
        case 30: 
          { return new Symbol(Token.VAR2, yytext());
          }
        case 110: break;
        case 31: 
          { return new Symbol(Token.LANGTAG, yytext());
          }
        case 111: break;
        case 32: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_NEGATIVE, yytext());
          }
        case 112: break;
        case 33: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_POSITIVE, yytext());
          }
        case 113: break;
        case 34: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL1, yytext());
          }
        case 114: break;
        case 35: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL2, yytext());
          }
        case 115: break;
        case 36: 
          { return new Symbol(Token.NIL, yytext());
          }
        case 116: break;
        case 37: 
          { return new Symbol(Token.ANON, yytext());
          }
        case 117: break;
        case 38: 
          { return new Symbol(Token.AND);
          }
        case 118: break;
        case 39: 
          { return new Symbol(Token.OR);
          }
        case 119: break;
        case 40: 
          { return new Symbol(Token.NOT_EQUAL);
          }
        case 120: break;
        case 41: 
          { yybegin(IRI_STATE);return new Symbol(Token.TYPE, yytext());
          }
        case 121: break;
        case 42: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_NEGATIVE, yytext());
          }
        case 122: break;
        case 43: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_POSITIVE, yytext());
          }
        case 123: break;
        case 44: 
          { return new Symbol(Token.ASC);
          }
        case 124: break;
        case 45: 
          { return new Symbol(Token.ASK);
          }
        case 125: break;
        case 46: 
          { return new Symbol(Token.STR);
          }
        case 126: break;
        case 47: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE, yytext());
          }
        case 127: break;
        case 48: 
          { return new Symbol(Token.LANG);
          }
        case 128: break;
        case 49: 
          { return new Symbol(Token.BASE);
          }
        case 129: break;
        case 50: 
          { return new Symbol(Token.FROM);
          }
        case 130: break;
        case 51: 
          { return new Symbol(Token.TRUE);
          }
        case 131: break;
        case 52: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_NEGATIVE, yytext());
          }
        case 132: break;
        case 53: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_POSITIVE, yytext());
          }
        case 133: break;
        case 54: 
          { return new Symbol(Token.NAMED);
          }
        case 134: break;
        case 55: 
          { return new Symbol(Token.LIMIT);
          }
        case 135: break;
        case 56: 
          { return new Symbol(Token.GRAPH);
          }
        case 136: break;
        case 57: 
          { return new Symbol(Token.REGEX);
          }
        case 137: break;
        case 58: 
          { return new Symbol(Token.UNION);
          }
        case 138: break;
        case 59: 
          { return new Symbol(Token.ISURI);
          }
        case 139: break;
        case 60: 
          { return new Symbol(Token.ISIRI);
          }
        case 140: break;
        case 61: 
          { return new Symbol(Token.BOUND);
          }
        case 141: break;
        case 62: 
          { return new Symbol(Token.WHERE);
          }
        case 142: break;
        case 63: 
          { return new Symbol(Token.FALSE);
          }
        case 143: break;
        case 64: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG1, yytext());
          }
        case 144: break;
        case 65: 
          { return new Symbol(Token.SELECT);
          }
        case 145: break;
        case 66: 
          { return new Symbol(Token.OFFSET);
          }
        case 146: break;
        case 67: 
          { yybegin(PNAME_SYM);return new Symbol(Token.PREFIX);
          }
        case 147: break;
        case 68: 
          { return new Symbol(Token.FILTER);
          }
        case 148: break;
        case 69: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG2, yytext());
          }
        case 149: break;
        case 70: 
          { return new Symbol(Token.REDUCED);
          }
        case 150: break;
        case 71: 
          { return new Symbol(Token.ISBLANK);
          }
        case 151: break;
        case 72: 
          { return new Symbol(Token.DESCRIBE);
          }
        case 152: break;
        case 73: 
          { return new Symbol(Token.DATATYPE);
          }
        case 153: break;
        case 74: 
          { return new Symbol(Token.DISTINCT);
          }
        case 154: break;
        case 75: 
          { return new Symbol(Token.ORDER_BY);
          }
        case 155: break;
        case 76: 
          { return new Symbol(Token.OPTIONAL);
          }
        case 156: break;
        case 77: 
          { return new Symbol(Token.SAMETERM);
          }
        case 157: break;
        case 78: 
          { return new Symbol(Token.CONSTRUCT);
          }
        case 158: break;
        case 79: 
          { return new Symbol(Token.ISLITERAL);
          }
        case 159: break;
        case 80: 
          { return new Symbol(Token.LANGMATCHES);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new Symbol(Token.END);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
