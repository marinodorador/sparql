/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package lexic;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>SparqlFlex.flex</tt>
 */
public class Alex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_SYM = 2;
  public static final int PNAME_SYM = 4;
  public static final int IRI_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\30\1\13\1\14\1\14\1\13\22\2\1\27\1\41\1\23"+
    "\1\0\1\6\1\0\1\36\1\21\1\25\1\26\1\42\1\17\1\46"+
    "\1\11\1\16\1\43\12\12\1\4\1\47\1\1\1\40\1\3\1\5"+
    "\1\7\1\51\1\72\1\57\1\53\1\33\1\76\1\55\1\60\1\67"+
    "\1\10\1\75\1\54\1\52\1\50\1\62\1\71\1\10\1\63\1\61"+
    "\1\56\1\64\1\10\1\100\1\77\1\70\1\10\1\31\1\22\1\32"+
    "\1\35\1\34\1\2\1\73\1\24\2\10\1\20\1\101\2\10\1\65"+
    "\2\10\1\102\1\74\1\24\3\10\1\104\1\66\1\103\1\105\5\10"+
    "\1\44\1\37\1\45\7\0\1\15\61\0\1\34\10\0\27\34\1\0"+
    "\37\34\1\0\u0208\34\160\34\16\34\1\0\u1c81\34\14\0\2\34\32\0"+
    "\1\15\1\15\25\0\2\34\57\0\u0120\34\u0a70\0\u03f0\34\21\0\ua7ff\34"+
    "\u2100\0\u04d0\34\40\0\u020e\34\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\2\1\1\14\1\15"+
    "\1\11\1\16\1\17\2\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\16\1\1\30\4\1\1\31"+
    "\1\2\1\3\1\7\1\12\1\13\1\14\1\15\1\31"+
    "\1\16\1\17\3\31\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\16\31\1\30\4\31\1\32\1\31"+
    "\1\7\1\12\16\31\1\30\4\31\1\1\1\2\24\1"+
    "\1\33\1\0\1\34\1\33\1\35\1\36\1\4\1\33"+
    "\1\5\1\33\1\6\1\33\1\37\1\0\1\33\1\0"+
    "\1\4\1\0\1\40\1\0\2\33\1\0\1\41\2\0"+
    "\1\33\1\42\2\0\1\33\1\0\1\43\1\0\1\44"+
    "\1\0\1\45\1\46\1\47\1\50\32\0\1\35\1\51"+
    "\66\0\5\52\3\0\3\53\1\42\1\0\2\43\1\0"+
    "\1\54\1\55\10\0\1\56\24\0\1\54\1\55\10\0"+
    "\1\56\24\0\1\54\1\55\10\0\1\56\23\0\1\37"+
    "\3\0\2\57\7\0\1\43\1\0\1\54\2\0\1\60"+
    "\20\0\1\61\1\0\1\62\3\0\1\63\1\0\1\54"+
    "\2\0\1\60\20\0\1\61\1\0\1\62\3\0\1\63"+
    "\1\0\1\54\2\0\1\60\20\0\1\61\1\0\1\62"+
    "\3\0\1\63\2\64\1\65\3\0\1\43\1\66\4\0"+
    "\1\67\1\70\6\0\1\71\1\72\1\0\1\73\1\74"+
    "\3\0\1\75\1\0\1\76\1\77\1\66\4\0\1\67"+
    "\1\70\6\0\1\71\1\72\1\0\1\73\1\74\3\0"+
    "\1\75\1\0\1\76\1\77\1\66\4\0\1\67\1\70"+
    "\6\0\1\71\1\72\1\0\1\73\1\74\3\0\1\75"+
    "\1\0\1\76\1\77\1\100\6\0\1\101\2\0\1\102"+
    "\4\0\1\103\1\104\5\0\1\101\1\0\1\102\4\0"+
    "\1\103\1\104\5\0\1\101\1\0\1\102\4\0\1\103"+
    "\1\104\1\105\7\0\1\106\1\0\1\107\7\0\1\106"+
    "\1\0\1\107\7\0\1\106\1\0\1\107\1\0\1\110"+
    "\1\111\1\112\2\0\1\113\1\114\1\0\1\115\1\110"+
    "\1\111\1\112\2\0\1\114\1\0\1\115\1\110\1\111"+
    "\1\112\2\0\1\114\1\0\1\115\1\0\1\116\1\117"+
    "\1\0\1\116\1\117\1\0\1\116\1\117\3\0\3\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0118\0\u0578\0\u05be\0\u0118"+
    "\0\u0604\0\u064a\0\u0118\0\u0690\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64"+
    "\0\u0302\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0bc2\0\u0bc2\0\u0bc2\0\u0bc2\0\u0bc2\0\u03d4\0\u0bc2\0\u0bc2"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0bc2\0\u0d66\0\u0bc2\0\u0bc2\0\u0bc2"+
    "\0\u0bc2\0\u0bc2\0\u0bc2\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u0bc2\0\u1180\0\u11c6\0\u120c\0\u1252\0\u0bc2\0\u1298"+
    "\0\u1298\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u1298\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u0bc2\0\u17ca\0\u0cda"+
    "\0\u0d20\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u0118\0\u1810\0\u0bc2\0\u1856\0\u1810"+
    "\0\u0bc2\0\u189c\0\u01ea\0\u18e2\0\u0230\0\u1928\0\u0276\0\u196e"+
    "\0\u19b4\0\u0302\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u0bc2\0\u1f2c\0\u0bc2"+
    "\0\u0bc2\0\u0bc2\0\u0bc2\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u0bc2\0\u0bc2\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee"+
    "\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u1298\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u19fa\0\u1a40\0\u1a86"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u1be4\0\u366a\0\u36b0"+
    "\0\u0bc2\0\u36f6\0\u1dce\0\u373c\0\u3782\0\u19b4\0\u19b4\0\u37c8"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u19b4"+
    "\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2"+
    "\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u0bc2\0\u0bc2\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u0bc2\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0"+
    "\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600"+
    "\0\u4646\0\u468c\0\u46d2\0\u1298\0\u1298\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u1298\0\u4948\0\u498e"+
    "\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee"+
    "\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u35de\0\u3624\0\u4f92"+
    "\0\u4fd8\0\u501e\0\u5064\0\u373c\0\u50aa\0\u50f0\0\u5136\0\u517c"+
    "\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac"+
    "\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc"+
    "\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u19b4\0\u573a\0\u19b4\0\u5780"+
    "\0\u57c6\0\u580c\0\u19b4\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a"+
    "\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a"+
    "\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca"+
    "\0\u0bc2\0\u5e10\0\u0bc2\0\u5e56\0\u5e9c\0\u5ee2\0\u0bc2\0\u5f28"+
    "\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086\0\u60cc\0\u6112\0\u6158"+
    "\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342\0\u6388"+
    "\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u1298\0\u64e6\0\u1298\0\u652c"+
    "\0\u6572\0\u65b8\0\u1298\0\u4f06\0\u4f4c\0\u4fd8\0\u65fe\0\u6644"+
    "\0\u668a\0\u66d0\0\u19b4\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u19b4"+
    "\0\u19b4\0\u682e\0\u6874\0\u68ba\0\u6900\0\u6946\0\u698c\0\u19b4"+
    "\0\u19b4\0\u69d2\0\u19b4\0\u19b4\0\u6a18\0\u6a5e\0\u6aa4\0\u19b4"+
    "\0\u6aea\0\u19b4\0\u19b4\0\u0bc2\0\u6b30\0\u6b76\0\u6bbc\0\u6c02"+
    "\0\u0bc2\0\u0bc2\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6"+
    "\0\u0bc2\0\u0bc2\0\u6dec\0\u0bc2\0\u0bc2\0\u6e32\0\u6e78\0\u6ebe"+
    "\0\u0bc2\0\u6f04\0\u0bc2\0\u0bc2\0\u1298\0\u6f4a\0\u6f90\0\u6fd6"+
    "\0\u701c\0\u1298\0\u1298\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u717a"+
    "\0\u71c0\0\u1298\0\u1298\0\u7206\0\u1298\0\u1298\0\u724c\0\u7292"+
    "\0\u72d8\0\u1298\0\u731e\0\u1298\0\u1298\0\u0bc2\0\u7364\0\u73aa"+
    "\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u19b4\0\u7508\0\u754e\0\u19b4"+
    "\0\u7594\0\u75da\0\u7620\0\u7666\0\u19b4\0\u19b4\0\u76ac\0\u76f2"+
    "\0\u7738\0\u777e\0\u77c4\0\u0bc2\0\u780a\0\u0bc2\0\u7850\0\u7896"+
    "\0\u78dc\0\u7922\0\u0bc2\0\u0bc2\0\u7968\0\u79ae\0\u79f4\0\u7a3a"+
    "\0\u7a80\0\u1298\0\u7ac6\0\u1298\0\u7b0c\0\u7b52\0\u7b98\0\u7bde"+
    "\0\u1298\0\u1298\0\u0bc2\0\u7c24\0\u7c6a\0\u7cb0\0\u7cf6\0\u7d3c"+
    "\0\u7d82\0\u7dc8\0\u19b4\0\u7e0e\0\u19b4\0\u7e54\0\u7e9a\0\u7ee0"+
    "\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u0bc2\0\u803e\0\u0bc2\0\u8084"+
    "\0\u80ca\0\u8110\0\u8156\0\u819c\0\u81e2\0\u8228\0\u1298\0\u826e"+
    "\0\u1298\0\u82b4\0\u19b4\0\u19b4\0\u19b4\0\u82fa\0\u8340\0\u0bc2"+
    "\0\u19b4\0\u8386\0\u19b4\0\u0bc2\0\u0bc2\0\u0bc2\0\u83cc\0\u8412"+
    "\0\u0bc2\0\u8458\0\u0bc2\0\u1298\0\u1298\0\u1298\0\u849e\0\u84e4"+
    "\0\u1298\0\u852a\0\u1298\0\u8570\0\u19b4\0\u19b4\0\u85b6\0\u0bc2"+
    "\0\u0bc2\0\u85fc\0\u1298\0\u1298\0\u8642\0\u8688\0\u86ce\0\u19b4"+
    "\0\u0bc2\0\u1298";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\0\1\20\1\21\1\14"+
    "\1\22\1\5\1\23\1\14\1\24\1\25\2\26\1\27"+
    "\1\30\2\14\1\5\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\14"+
    "\1\45\1\46\1\47\1\14\1\50\1\14\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\2\14\1\57\1\60\1\61"+
    "\2\14\1\62\1\14\1\63\1\64\1\14\1\65\2\14"+
    "\1\66\1\67\1\66\1\70\5\66\1\71\1\66\1\17"+
    "\2\0\1\72\1\73\5\66\1\74\1\75\2\76\1\77"+
    "\1\100\2\66\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\66"+
    "\1\116\1\117\1\120\1\66\1\121\1\66\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\2\66\1\130\1\131\1\132"+
    "\2\66\1\133\1\66\1\134\1\135\1\66\1\136\3\66"+
    "\1\67\1\66\1\70\1\137\3\66\1\140\1\141\1\140"+
    "\1\17\2\0\1\142\1\73\1\140\3\66\1\140\1\74"+
    "\1\75\2\17\1\77\1\100\2\140\1\66\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\143\1\144\1\140\1\145\1\146\1\147\1\140\1\150"+
    "\1\140\1\151\1\152\1\153\1\154\1\155\1\156\2\140"+
    "\1\157\1\160\1\161\2\140\1\162\1\140\1\163\1\164"+
    "\1\140\1\165\2\140\1\166\1\167\1\166\1\70\5\166"+
    "\1\71\1\166\1\17\2\0\1\72\1\73\5\166\1\74"+
    "\1\75\2\17\1\77\1\100\3\166\1\170\1\171\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\172"+
    "\1\173\1\166\1\174\1\175\1\176\1\166\1\177\1\166"+
    "\1\200\1\201\1\202\1\203\1\204\1\205\2\166\1\206"+
    "\1\207\1\132\2\166\1\210\1\166\1\211\1\212\1\166"+
    "\1\213\2\166\12\0\1\214\73\0\1\215\2\0\1\216"+
    "\6\215\1\217\2\0\5\215\2\0\3\215\2\0\4\215"+
    "\1\0\1\215\1\0\1\220\3\215\2\0\40\215\12\0"+
    "\1\214\25\0\1\221\55\0\2\222\1\223\3\0\1\222"+
    "\1\0\1\222\3\0\1\222\6\0\2\222\13\0\36\222"+
    "\10\0\1\224\1\0\1\225\5\0\1\224\3\0\1\224"+
    "\6\0\2\224\13\0\36\224\10\0\1\226\1\0\1\227"+
    "\5\0\1\226\3\0\1\226\6\0\2\226\13\0\36\226"+
    "\10\0\1\230\1\0\1\214\5\0\1\230\3\0\1\230"+
    "\6\0\1\230\14\0\36\230\4\0\1\222\3\0\2\231"+
    "\1\232\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\36\231\4\233\1\234\3\233\2\235\1\236"+
    "\3\0\1\237\1\233\1\235\3\233\1\235\6\233\2\235"+
    "\13\233\36\235\4\214\1\223\3\214\2\232\1\16\3\0"+
    "\1\240\1\214\1\241\3\214\1\232\6\214\1\241\1\232"+
    "\13\214\36\232\13\0\1\17\13\0\2\17\61\0\1\222"+
    "\3\0\2\231\1\240\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\2\231\13\0\36\231\12\242\1\243\3\0"+
    "\1\244\67\242\12\245\1\246\1\0\5\245\1\247\1\250"+
    "\63\245\12\251\1\252\1\0\5\251\1\0\1\253\1\254"+
    "\62\251\12\0\1\214\1\255\12\0\1\256\2\255\67\0"+
    "\1\214\1\17\13\0\2\17\67\0\1\214\1\257\13\0"+
    "\2\257\1\0\1\260\65\0\1\214\23\0\1\261\61\0"+
    "\1\214\24\0\1\262\60\0\1\214\25\0\1\263\51\0"+
    "\1\222\3\0\2\231\1\232\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\1\231\1\264\34\231"+
    "\4\0\1\222\3\0\2\231\1\232\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\11\231\1\265"+
    "\24\231\4\0\1\222\3\0\2\231\1\232\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\1\266\1\231\13\0"+
    "\1\231\1\267\15\231\1\270\16\231\4\0\1\222\3\0"+
    "\2\231\1\232\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\1\231\1\271\15\231\1\272\16\231"+
    "\4\0\1\222\3\0\2\231\1\232\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\13\231\1\273"+
    "\22\231\4\0\1\222\3\0\2\231\1\232\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\12\231"+
    "\1\274\23\231\4\0\1\222\3\0\2\231\1\232\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\1\275\1\231"+
    "\13\0\6\231\1\276\27\231\4\0\1\222\3\0\2\231"+
    "\1\232\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\13\231\1\277\5\231\1\300\4\231\1\301"+
    "\7\231\4\0\1\222\3\0\2\231\1\232\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\1\302\1\231\13\0"+
    "\36\231\4\0\1\222\3\0\2\231\1\232\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\1\303"+
    "\35\231\4\0\1\222\3\0\2\231\1\232\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\16\231"+
    "\1\304\17\231\4\0\1\222\3\0\2\231\1\232\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\23\231\1\305\12\231\4\0\1\222\3\0\2\231\1\232"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\13\231\1\306\22\231\4\0\1\222\3\0\2\231"+
    "\1\232\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\1\231\1\307\10\231\1\310\23\231\4\0"+
    "\1\222\3\0\2\231\1\232\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\13\231\1\311\3\231"+
    "\1\312\16\231\4\0\1\222\3\0\2\231\1\232\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\10\231\1\313\25\231\4\0\1\222\3\0\2\231\1\232"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\23\231\1\314\12\231\4\0\1\222\3\0\2\231"+
    "\1\232\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\34\231\1\315\1\231\146\0\1\316\105\0"+
    "\1\221\102\0\1\317\106\0\1\261\106\0\1\262\106\0"+
    "\1\263\116\0\1\320\115\0\1\321\57\0\1\322\15\0"+
    "\1\323\15\0\1\324\67\0\1\325\15\0\1\326\101\0"+
    "\1\327\104\0\1\330\56\0\1\331\22\0\1\332\112\0"+
    "\1\333\5\0\1\334\4\0\1\335\42\0\1\336\122\0"+
    "\1\337\123\0\1\340\112\0\1\341\75\0\1\342\73\0"+
    "\1\343\10\0\1\344\106\0\1\345\3\0\1\346\76\0"+
    "\1\347\120\0\1\350\116\0\1\351\5\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\36\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\1\352\1\353\34\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\11\352\1\354\24\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\1\355\1\352"+
    "\13\0\1\352\1\356\15\352\1\357\16\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\1\352\1\360\15\352\1\361\16\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\13\352\1\362\22\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\12\352\1\363\23\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\1\364\1\352\13\0\6\352\1\365"+
    "\27\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\13\352\1\366"+
    "\5\352\1\367\4\352\1\370\7\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\1\371\1\352\13\0\36\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\1\372\35\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\16\352\1\373\17\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\23\352\1\374\12\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\13\352\1\375\22\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\1\352\1\376\10\352\1\377\23\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\13\352\1\u0100\3\352\1\u0101\16\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\2\352\13\0\10\352\1\u0102\25\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\2\352\13\0\23\352\1\u0103\12\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\2\352\13\0\34\352\1\u0104\1\352\1\215"+
    "\2\0\1\216\7\215\2\0\5\215\2\0\3\215\2\0"+
    "\4\215\1\0\1\215\1\0\1\220\3\215\2\0\41\215"+
    "\2\0\1\216\7\215\2\0\5\215\2\0\3\215\2\0"+
    "\4\215\1\0\1\215\1\0\4\215\2\0\41\215\2\0"+
    "\1\216\6\215\1\217\2\0\5\215\2\0\3\215\2\0"+
    "\4\215\1\0\1\215\1\0\4\215\2\0\40\215\10\0"+
    "\3\222\3\0\1\222\1\0\1\222\3\0\1\222\6\0"+
    "\2\222\13\0\36\222\10\0\1\224\1\0\1\224\5\0"+
    "\1\224\3\0\1\224\6\0\2\224\13\0\36\224\10\0"+
    "\1\226\1\0\1\226\5\0\1\226\3\0\1\226\6\0"+
    "\2\226\13\0\36\226\10\0\1\230\1\u0105\6\0\1\230"+
    "\3\0\1\230\6\0\1\230\14\0\36\230\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\36\231\12\0\1\u0106\103\0\2\222"+
    "\1\u0107\3\0\1\222\1\0\1\222\3\0\1\222\6\0"+
    "\2\222\13\0\36\222\4\0\1\222\3\0\2\231\1\u0108"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\36\231\4\u0106\1\u0107\3\u0106\2\u0108\1\236\3\0"+
    "\1\u0109\1\u0106\1\u010a\3\u0106\1\u0108\6\u0106\1\u010a\1\u0108"+
    "\13\u0106\36\u0108\4\0\1\222\3\0\2\231\1\u0109\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\36\231\4\0\1\222\3\0\2\231\1\240\3\0\1\231"+
    "\1\0\1\u010b\3\0\1\231\6\0\1\u010b\1\231\13\0"+
    "\36\231\4\0\1\222\3\0\1\231\1\u010c\1\232\3\0"+
    "\1\231\1\u010d\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\36\231\12\0\1\u010e\73\0\12\u010e\1\243\3\0\1\u010f"+
    "\1\u010e\1\u0110\12\u010e\1\u0110\52\u010e\12\0\1\u010f\73\0"+
    "\13\245\1\0\5\245\1\u0111\1\250\75\245\1\246\1\0"+
    "\5\245\1\u0111\1\250\63\245\21\0\1\u0112\105\0\1\245"+
    "\1\0\2\245\54\0\1\245\1\0\2\245\1\0\13\251"+
    "\1\0\5\251\1\0\1\253\1\u0113\74\251\1\252\1\0"+
    "\5\251\1\0\1\253\1\u0113\62\251\21\0\1\251\1\0"+
    "\2\251\54\0\1\251\1\0\2\251\1\0\13\251\1\0"+
    "\5\251\1\0\1\253\1\u0114\62\251\13\0\1\255\12\0"+
    "\1\256\2\255\70\0\1\257\13\0\2\257\1\0\1\260"+
    "\57\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\2\231\1\u0115\33\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\7\231\1\u0116\15\231"+
    "\1\u0117\10\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\11\231"+
    "\1\u0118\24\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\6\231"+
    "\1\u0119\27\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\11\231"+
    "\1\u011a\24\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\1\u011b"+
    "\35\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\2\231\1\u011c"+
    "\33\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\1\231\1\u011d"+
    "\34\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\1\u011e\35\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\4\231\1\u011f\31\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\13\231\1\u0120\22\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\3\231\1\u0121\32\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\6\231\1\u0122\27\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\26\231\1\u0123\7\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\3\231\1\u0124\1\231"+
    "\1\u0125\30\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\17\231"+
    "\1\u0126\16\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\4\231"+
    "\1\u0127\7\231\1\u0128\2\231\1\u0129\2\231\1\u012a\13\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\24\231\1\u012b\11\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\1\u012c\1\231\13\0\36\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\2\231\13\0\11\231\1\u012d\24\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\2\231\13\0\14\231\1\u012e\21\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\2\231\13\0\12\231\1\u012f\23\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\2\231\13\0\4\231\1\u0130\31\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\1\u0131\1\231\13\0\36\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\32\231\1\u0132\3\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\35\231\1\u0133\52\0\1\u0134\112\0"+
    "\1\u0135\15\0\1\u0136\71\0\1\u0137\102\0\1\u0138\110\0"+
    "\1\u0139\74\0\1\u013a\107\0\1\u013b\104\0\1\u013c\104\0"+
    "\1\u013d\111\0\1\u013e\114\0\1\u013f\75\0\1\u0140\110\0"+
    "\1\u0141\125\0\1\u0142\62\0\1\u0143\1\0\1\u0144\117\0"+
    "\1\u0145\72\0\1\u0146\7\0\1\u0147\2\0\1\u0148\2\0"+
    "\1\u0149\107\0\1\u014a\44\0\1\u014b\133\0\1\u014c\110\0"+
    "\1\u014d\103\0\1\u014e\77\0\1\u014f\64\0\1\u0150\154\0"+
    "\1\u0151\110\0\1\u0152\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\2\352\1\u0153\33\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\7\352\1\u0154\15\352\1\u0155\10\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\11\352\1\u0156\24\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\6\352\1\u0157\27\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\11\352\1\u0158\24\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\1\u0159\35\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\2\352\1\u015a\33\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\1\352\1\u015b\34\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\1\u015c\35\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\4\352\1\u015d\31\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\13\352\1\u015e\22\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\3\352\1\u015f\32\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\6\352\1\u0160\27\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\26\352\1\u0161\7\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\3\352\1\u0162\1\352\1\u0163\30\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\17\352\1\u0164\16\352\4\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\2\352\13\0\4\352\1\u0165\7\352\1\u0166\2\352\1\u0167"+
    "\2\352\1\u0168\13\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\24\352\1\u0169\11\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\1\u016a\1\352"+
    "\13\0\36\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\11\352"+
    "\1\u016b\24\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\14\352"+
    "\1\u016c\21\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\12\352"+
    "\1\u016d\23\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\4\352"+
    "\1\u016e\31\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\1\u016f\1\352\13\0"+
    "\36\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\32\352\1\u0170"+
    "\3\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\35\352\1\u0171"+
    "\10\0\1\u0172\1\0\1\u0172\5\0\1\u0172\3\0\1\u0172"+
    "\6\0\1\u0172\14\0\36\u0172\4\0\1\222\3\0\2\231"+
    "\1\u0109\3\0\1\231\1\0\1\u0173\3\0\1\231\6\0"+
    "\1\u0173\1\231\13\0\36\231\4\0\1\222\3\0\1\231"+
    "\1\u0174\1\u0108\3\0\1\231\1\u0175\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\36\231\4\0\1\222\3\0\1\231"+
    "\1\u010c\1\u0176\3\0\1\231\1\u010d\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\36\231\4\0\1\222\3\0\2\231"+
    "\1\u0176\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\36\231\12\0\1\u0177\105\0\1\u010f\5\0"+
    "\1\u0178\12\0\1\u0178\63\0\1\u0179\1\u010e\4\0\1\u0179"+
    "\66\0\21\u0112\1\u017a\1\u017b\63\u0112\13\u017c\1\u017d\5\u017c"+
    "\1\u017d\1\u017e\1\u017f\62\u017c\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\1\u0180"+
    "\1\231\13\0\36\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\7\231\1\u0181\26\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\1\231\1\u0182\34\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\6\231\1\u0183\27\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\5\231\1\u0184\30\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\17\231\1\u0185\16\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\21\231\1\u0186\14\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\11\231\1\u0187\24\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\1\u0188\1\231"+
    "\13\0\36\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\1\u0189\1\231\13\0"+
    "\36\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\17\231\1\u018a"+
    "\16\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\11\231\1\u018b"+
    "\24\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\2\231\13\0\14\231\1\u018c"+
    "\21\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\1\u018d\1\231\13\0\36\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\12\231\1\u018e\23\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\17\231\1\u018f\16\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\13\231\1\u0190\22\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\13\231\1\u0191\22\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\4\231\1\u0192\31\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\u0193"+
    "\3\0\1\231\6\0\2\231\13\0\36\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\26\231\1\u0194\7\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\1\u0195\1\231\13\0\36\231\4\0\1\222\3\0"+
    "\3\231\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\1\u0196\35\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\2\231\1\u0197\33\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\6\231\1\u0198\27\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\13\231\1\u0199\22\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\16\231\1\u019a\17\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\u019b\3\0\1\231\6\0\2\231"+
    "\13\0\36\231\33\0\1\u019c\131\0\1\u019d\77\0\1\u019e"+
    "\112\0\1\u019f\104\0\1\u01a0\117\0\1\u01a1\107\0\1\u01a2"+
    "\75\0\1\u01a3\57\0\1\u01a4\105\0\1\u01a5\141\0\1\u01a6"+
    "\77\0\1\u01a7\110\0\1\u01a8\54\0\1\u01a9\134\0\1\u01aa"+
    "\112\0\1\u01ab\101\0\1\u01ac\105\0\1\u01ad\76\0\1\u01ae"+
    "\51\0\1\u01af\163\0\1\u01b0\42\0\1\u01b1\122\0\1\u01b2"+
    "\107\0\1\u01b3\111\0\1\u01b4\112\0\1\u01b5\110\0\1\u01b6"+
    "\37\0\1\u01b7\71\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\1\u01b8\1\352\13\0"+
    "\36\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\7\352\1\u01b9"+
    "\26\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\1\352\1\u01ba"+
    "\34\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\6\352\1\u01bb"+
    "\27\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\5\352\1\u01bc"+
    "\30\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\17\352\1\u01bd"+
    "\16\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\21\352\1\u01be"+
    "\14\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\11\352\1\u01bf"+
    "\24\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\1\u01c0\1\352\13\0\36\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\1\u01c1\1\352\13\0\36\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\2\352\13\0\17\352\1\u01c2\16\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\2\352\13\0\11\352\1\u01c3\24\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\2\352\13\0\14\352\1\u01c4\21\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\1\u01c5\1\352\13\0\36\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\12\352\1\u01c6\23\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\17\352\1\u01c7\16\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\13\352\1\u01c8\22\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\13\352\1\u01c9\22\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\4\352\1\u01ca\31\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\u01cb\3\0\1\352"+
    "\6\0\2\352\13\0\36\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\26\352\1\u01cc\7\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\1\u01cd"+
    "\1\352\13\0\36\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\1\u01ce\35\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\2\352"+
    "\1\u01cf\33\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\6\352"+
    "\1\u01d0\27\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\13\352"+
    "\1\u01d1\22\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\16\352"+
    "\1\u01d2\17\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\u01d3\3\0\1\352\6\0\2\352\13\0\36\352"+
    "\10\0\1\u0172\1\u0105\1\u0172\5\0\1\u0172\3\0\1\u0172"+
    "\6\0\1\u0172\14\0\36\u0172\4\0\1\222\3\0\1\231"+
    "\1\u0174\1\u01d4\3\0\1\231\1\u0175\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\36\231\4\0\1\222\3\0\2\231"+
    "\1\u01d4\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\36\231\12\0\1\u01d5\104\0\1\u0179\1\u01d6"+
    "\4\0\1\u0179\100\0\1\u01d6\73\0\21\u0112\1\u01d7\1\u017b"+
    "\63\u0112\21\0\1\u0112\1\0\2\u0112\54\0\1\u0112\1\0"+
    "\2\u0112\1\0\22\u017d\1\u01d8\1\u01d9\62\u017d\21\0\1\u017c"+
    "\1\0\2\u017c\54\0\1\u017c\1\0\2\u017c\1\0\13\u017c"+
    "\1\u017d\5\u017c\1\u017d\1\u017e\1\u01da\62\u017c\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\3\231\1\u01db\32\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\13\231\1\u01dc\22\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\6\231\1\u01dd\27\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\17\231\1\u01de\16\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\2\231\1\u01df\33\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\6\231\1\u01e0\27\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\10\231\1\u01e1\25\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\6\231\1\u01e2\27\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\7\231\1\u01e3\26\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\13\231\1\u01e4\22\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\12\231\1\u01e5\23\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\1\u01e6\1\231\13\0\36\231\4\0\1\222\3\0"+
    "\3\231\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\7\231\1\u01e7\26\231\4\0\1\222\3\0"+
    "\3\231\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\27\231\1\u01e8\6\231\4\0\1\222\3\0"+
    "\3\231\3\0\1\231\1\0\1\231\3\0\1\231\6\0"+
    "\2\231\13\0\1\u01e9\35\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\6\231\1\u01ea\27\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\17\231\1\u01eb\16\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\17\231\1\u01ec\16\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\1\231\1\u01ed\34\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\6\231\1\u01ee\27\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\17\231\1\u01ef\16\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\3\231\1\u01f0\32\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\1\u01f1"+
    "\1\231\13\0\36\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\1\u01f2\1\231"+
    "\13\0\36\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\u01f3\3\0\1\231\6\0\2\231\13\0\36\231"+
    "\53\0\1\u01f4\115\0\1\u01f5\100\0\1\u01f6\116\0\1\u01f7"+
    "\70\0\1\u01f8\111\0\1\u01f9\107\0\1\u01fa\103\0\1\u01fb"+
    "\106\0\1\u01fc\111\0\1\u01fd\104\0\1\u01fe\56\0\1\u01ff"+
    "\131\0\1\u0200\125\0\1\u0201\56\0\1\u0202\113\0\1\u0203"+
    "\116\0\1\u0204\105\0\1\u0205\67\0\1\u0206\112\0\1\u0207"+
    "\116\0\1\u0208\71\0\1\u0209\65\0\1\u020a\105\0\1\u020b"+
    "\72\0\1\u020c\71\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\3\352"+
    "\1\u020d\32\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\13\352"+
    "\1\u020e\22\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\6\352"+
    "\1\u020f\27\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\17\352"+
    "\1\u0210\16\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\2\352"+
    "\1\u0211\33\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\6\352"+
    "\1\u0212\27\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\10\352"+
    "\1\u0213\25\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\6\352"+
    "\1\u0214\27\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\7\352"+
    "\1\u0215\26\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\13\352"+
    "\1\u0216\22\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\12\352"+
    "\1\u0217\23\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\1\u0218\1\352\13\0"+
    "\36\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\7\352\1\u0219"+
    "\26\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\27\352\1\u021a"+
    "\6\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\2\352\13\0\1\u021b\35\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\6\352\1\u021c\27\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\17\352\1\u021d\16\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\17\352\1\u021e\16\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\1\352\1\u021f\34\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\6\352\1\u0220\27\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\17\352\1\u0221\16\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\3\352\1\u0222\32\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\1\u0223\1\352\13\0\36\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\1\u0224\1\352\13\0\36\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\u0225\3\0\1\352"+
    "\6\0\2\352\13\0\36\352\21\u0112\1\u0226\1\u017b\63\u0112"+
    "\21\0\1\u017d\1\0\2\u017d\54\0\1\u017d\1\0\2\u017d"+
    "\1\0\22\u017d\1\u01d8\1\u0227\62\u017d\13\u017c\1\u017d\5\u017c"+
    "\1\u017d\1\u017e\1\u0113\62\u017c\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\17\231\1\u0228\16\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\20\231\1\u0229\15\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\1\u022a\35\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\1\231\1\u022b\34\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\13\231\1\u022c\22\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\6\231\1\u022d\27\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\2\0\1\u022e\3\0"+
    "\2\231\13\0\36\231\4\0\1\222\3\0\3\231\3\0"+
    "\1\231\1\0\1\231\3\0\1\231\6\0\2\231\13\0"+
    "\1\u022f\35\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\6\231"+
    "\1\u0230\27\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\1\u0231\1\231\13\0"+
    "\36\231\4\0\1\222\3\0\3\231\3\0\1\231\1\0"+
    "\1\231\3\0\1\231\6\0\1\u0232\1\231\13\0\36\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\1\u0233\35\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\1\u0234\1\231\13\0\36\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\27\231\1\u0235\6\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\13\231\1\u0236\22\231\67\0\1\u0237"+
    "\106\0\1\u0238\65\0\1\u0239\106\0\1\u023a\117\0\1\u023b"+
    "\100\0\1\u023c\56\0\1\u022e\126\0\1\u023d\113\0\1\u023e"+
    "\62\0\1\u023f\105\0\1\u0240\122\0\1\u0241\70\0\1\u0242"+
    "\151\0\1\u0243\71\0\1\u0244\26\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\17\352\1\u0245\16\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\20\352\1\u0246\15\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\1\u0247\35\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\1\352\1\u0248\34\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\13\352\1\u0249\22\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\6\352\1\u024a\27\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\2\0\1\u022e\3\0"+
    "\2\352\13\0\36\352\4\0\1\137\3\0\3\352\3\0"+
    "\1\352\1\0\1\352\3\0\1\352\6\0\2\352\13\0"+
    "\1\u024b\35\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\2\352\13\0\6\352"+
    "\1\u024c\27\352\4\0\1\137\3\0\3\352\3\0\1\352"+
    "\1\0\1\352\3\0\1\352\6\0\1\u024d\1\352\13\0"+
    "\36\352\4\0\1\137\3\0\3\352\3\0\1\352\1\0"+
    "\1\352\3\0\1\352\6\0\1\u024e\1\352\13\0\36\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\1\u024f\35\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\1\u0250\1\352\13\0\36\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\27\352\1\u0251\6\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\13\352\1\u0252\22\352\22\u017d\1\u01d8"+
    "\1\u0253\62\u017d\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\22\231"+
    "\1\u0254\13\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\21\231"+
    "\1\u0255\14\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\7\231"+
    "\1\u0256\26\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\6\231"+
    "\1\u0257\27\231\4\0\1\222\3\0\3\231\3\0\1\231"+
    "\1\0\1\231\3\0\1\231\6\0\2\231\13\0\14\231"+
    "\1\u0258\21\231\72\0\1\u0259\17\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\1\231\1\u025a\34\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\3\231\1\u025b\32\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\13\231\1\u025c\22\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\25\231\1\u025d\10\231\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\13\231\1\u025e\22\231\72\0\1\u025f\104\0\1\u0260"+
    "\73\0\1\u0261\104\0\1\u0262\113\0\1\u0263\72\0\1\u0264"+
    "\107\0\1\u0265\115\0\1\u0266\117\0\1\u0267\73\0\1\u0268"+
    "\26\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\22\352\1\u0269\13\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\21\352\1\u026a\14\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\7\352\1\u026b\26\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\6\352\1\u026c\27\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\14\352\1\u026d\21\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\1\352\1\u026e\34\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\3\352\1\u026f\32\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\13\352\1\u0270\22\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\25\352\1\u0271\10\352"+
    "\4\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\2\352\13\0\13\352\1\u0272\22\352"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\1\u0273\1\231\13\0\36\231\4\0"+
    "\1\222\3\0\3\231\3\0\1\231\1\0\1\231\3\0"+
    "\1\231\6\0\1\u0274\1\231\13\0\36\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\6\231\1\u0275\27\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\7\231\1\u0276\26\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\7\231\1\u0277\26\231\70\0\1\u0278"+
    "\21\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\4\231\1\u0279\31\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\1\231\1\u027a\34\231"+
    "\4\0\1\222\3\0\3\231\3\0\1\231\1\0\1\231"+
    "\3\0\1\231\6\0\2\231\13\0\2\231\1\u027b\33\231"+
    "\33\0\1\u027c\105\0\1\u027d\130\0\1\u027e\106\0\1\u027f"+
    "\105\0\1\u0280\102\0\1\u0281\102\0\1\u0282\106\0\1\u0283"+
    "\37\0\1\137\3\0\3\352\3\0\1\352\1\0\1\352"+
    "\3\0\1\352\6\0\1\u0284\1\352\13\0\36\352\4\0"+
    "\1\137\3\0\3\352\3\0\1\352\1\0\1\352\3\0"+
    "\1\352\6\0\1\u0285\1\352\13\0\36\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\6\352\1\u0286\27\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\7\352\1\u0287\26\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\7\352\1\u0288\26\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\4\352\1\u0289\31\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\1\352\1\u028a\34\352\4\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\2\352\1\u028b\33\352\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\10\231\1\u028c\25\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\6\231\1\u028d\27\231\4\0\1\222"+
    "\3\0\3\231\3\0\1\231\1\0\1\231\3\0\1\231"+
    "\6\0\2\231\13\0\4\231\1\u028e\31\231\60\0\1\u028f"+
    "\103\0\1\u0290\103\0\1\u0291\35\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\10\352\1\u0292\25\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\6\352\1\u0293\27\352\4\0\1\137\3\0\3\352"+
    "\3\0\1\352\1\0\1\352\3\0\1\352\6\0\2\352"+
    "\13\0\4\352\1\u0294\31\352\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\1\u0295"+
    "\1\231\13\0\36\231\33\0\1\u0296\56\0\1\137\3\0"+
    "\3\352\3\0\1\352\1\0\1\352\3\0\1\352\6\0"+
    "\1\u0297\1\352\13\0\36\352\4\0\1\222\3\0\3\231"+
    "\3\0\1\231\1\0\1\231\3\0\1\231\6\0\2\231"+
    "\13\0\11\231\1\u0298\24\231\61\0\1\u0299\30\0\1\137"+
    "\3\0\3\352\3\0\1\352\1\0\1\352\3\0\1\352"+
    "\6\0\2\352\13\0\11\352\1\u029a\24\352";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\61\1\1\11\2\1\5\11\1\1\2\11\3\1"+
    "\1\11\1\1\6\11\16\1\1\11\4\1\1\11\26\1"+
    "\1\11\26\1\1\0\1\11\2\1\1\11\7\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\2\0\2\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\11\1\0\4\11\32\0\2\11\66\0\5\1\3\0"+
    "\3\1\1\11\1\0\2\1\1\0\2\1\10\0\1\1"+
    "\24\0\2\11\10\0\1\11\24\0\2\1\10\0\1\1"+
    "\23\0\1\1\3\0\2\1\7\0\1\1\1\0\1\1"+
    "\2\0\1\1\20\0\1\1\1\0\1\1\3\0\1\1"+
    "\1\0\1\1\2\0\1\1\20\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\1\2\0\1\1\20\0\1\1"+
    "\1\0\1\1\3\0\4\1\3\0\2\1\4\0\2\1"+
    "\6\0\2\1\1\0\2\1\3\0\1\1\1\0\2\1"+
    "\1\11\4\0\2\11\6\0\2\11\1\0\2\11\3\0"+
    "\1\11\1\0\2\11\1\1\4\0\2\1\6\0\2\1"+
    "\1\0\2\1\3\0\1\1\1\0\2\1\1\11\6\0"+
    "\1\1\2\0\1\1\4\0\2\1\5\0\1\11\1\0"+
    "\1\11\4\0\2\11\5\0\1\1\1\0\1\1\4\0"+
    "\2\1\1\11\7\0\1\1\1\0\1\1\7\0\1\11"+
    "\1\0\1\11\7\0\1\1\1\0\1\1\1\0\3\1"+
    "\2\0\1\11\1\1\1\0\1\1\3\11\2\0\1\11"+
    "\1\0\1\11\3\1\2\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\11\1\0\2\1\3\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public StringBuffer lexeme = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Alex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(Token.ERROR, yytext());
          }
        case 81: break;
        case 2: 
          { return new Symbol(Token.LESS);
          }
        case 82: break;
        case 3: 
          { return new Symbol(Token.GREATER);
          }
        case 83: break;
        case 4: 
          { return new Symbol(Token.PNAME_LN, yytext());
          }
        case 84: break;
        case 5: 
          { return new Symbol(Token.VAR1, yytext());
          }
        case 85: break;
        case 6: 
          { return new Symbol(Token.VAR2, yytext());
          }
        case 86: break;
        case 7: 
          { return new Symbol(Token.SUB);
          }
        case 87: break;
        case 8: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER, yytext());
          }
        case 88: break;
        case 9: 
          { 
          }
        case 89: break;
        case 10: 
          { return new Symbol(Token.PERIOD);
          }
        case 90: break;
        case 11: 
          { return new Symbol(Token.PLUS);
          }
        case 91: break;
        case 12: 
          { return new Symbol(Token.LEFT_PARENTH);
          }
        case 92: break;
        case 13: 
          { return new Symbol(Token.RIGTH_PARENTH);
          }
        case 93: break;
        case 14: 
          { return new Symbol(Token.LEFT_CLASP);
          }
        case 94: break;
        case 15: 
          { return new Symbol(Token.RIGHT_CLASP);
          }
        case 95: break;
        case 16: 
          { return new Symbol(Token.EQUAL);
          }
        case 96: break;
        case 17: 
          { return new Symbol(Token.NOT);
          }
        case 97: break;
        case 18: 
          { return new Symbol(Token.MULT);
          }
        case 98: break;
        case 19: 
          { return new Symbol(Token.DIV);
          }
        case 99: break;
        case 20: 
          { return new Symbol(Token.LEFT_BRACE);
          }
        case 100: break;
        case 21: 
          { return new Symbol(Token.RIGHT_BRACE);
          }
        case 101: break;
        case 22: 
          { return new Symbol(Token.COMMA);
          }
        case 102: break;
        case 23: 
          { return new Symbol(Token.SEMI);
          }
        case 103: break;
        case 24: 
          { return new Symbol(Token.A);
          }
        case 104: break;
        case 25: 
          { yybegin(YYINITIAL);
          }
        case 105: break;
        case 26: 
          { yybegin(IRI_STATE);return new Symbol(Token.PNAME_NS, yytext());
          }
        case 106: break;
        case 27: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL, yytext());
          }
        case 107: break;
        case 28: 
          { yybegin(YYINITIAL);return new Symbol(Token.IRI_REF, yytext());
          }
        case 108: break;
        case 29: 
          { return new Symbol(Token.LET);
          }
        case 109: break;
        case 30: 
          { return new Symbol(Token.GET);
          }
        case 110: break;
        case 31: 
          { return new Symbol(Token.LANGTAG, yytext());
          }
        case 111: break;
        case 32: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_NEGATIVE, yytext());
          }
        case 112: break;
        case 33: 
          { yybegin(TYPE_SYM);return new Symbol(Token.INTEGER_POSITIVE, yytext());
          }
        case 113: break;
        case 34: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL1, yytext());
          }
        case 114: break;
        case 35: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL2, yytext());
          }
        case 115: break;
        case 36: 
          { return new Symbol(Token.NIL, yytext());
          }
        case 116: break;
        case 37: 
          { return new Symbol(Token.ANON, yytext());
          }
        case 117: break;
        case 38: 
          { return new Symbol(Token.AND);
          }
        case 118: break;
        case 39: 
          { return new Symbol(Token.OR);
          }
        case 119: break;
        case 40: 
          { return new Symbol(Token.NOT_EQUAL);
          }
        case 120: break;
        case 41: 
          { yybegin(IRI_STATE);return new Symbol(Token.TYPE, yytext());
          }
        case 121: break;
        case 42: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_NEGATIVE, yytext());
          }
        case 122: break;
        case 43: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DECIMAL_POSITIVE, yytext());
          }
        case 123: break;
        case 44: 
          { return new Symbol(Token.ASC);
          }
        case 124: break;
        case 45: 
          { return new Symbol(Token.ASK);
          }
        case 125: break;
        case 46: 
          { return new Symbol(Token.STR);
          }
        case 126: break;
        case 47: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE, yytext());
          }
        case 127: break;
        case 48: 
          { return new Symbol(Token.LANG);
          }
        case 128: break;
        case 49: 
          { return new Symbol(Token.BASE);
          }
        case 129: break;
        case 50: 
          { return new Symbol(Token.FROM);
          }
        case 130: break;
        case 51: 
          { return new Symbol(Token.TRUE);
          }
        case 131: break;
        case 52: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_NEGATIVE, yytext());
          }
        case 132: break;
        case 53: 
          { yybegin(TYPE_SYM);return new Symbol(Token.DOUBLE_POSITIVE, yytext());
          }
        case 133: break;
        case 54: 
          { return new Symbol(Token.NAMED);
          }
        case 134: break;
        case 55: 
          { return new Symbol(Token.LIMIT);
          }
        case 135: break;
        case 56: 
          { return new Symbol(Token.GRAPH);
          }
        case 136: break;
        case 57: 
          { return new Symbol(Token.REGEX);
          }
        case 137: break;
        case 58: 
          { return new Symbol(Token.UNION);
          }
        case 138: break;
        case 59: 
          { return new Symbol(Token.ISURI);
          }
        case 139: break;
        case 60: 
          { return new Symbol(Token.ISIRI);
          }
        case 140: break;
        case 61: 
          { return new Symbol(Token.BOUND);
          }
        case 141: break;
        case 62: 
          { return new Symbol(Token.WHERE);
          }
        case 142: break;
        case 63: 
          { return new Symbol(Token.FALSE);
          }
        case 143: break;
        case 64: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG1, yytext());
          }
        case 144: break;
        case 65: 
          { return new Symbol(Token.SELECT);
          }
        case 145: break;
        case 66: 
          { return new Symbol(Token.OFFSET);
          }
        case 146: break;
        case 67: 
          { yybegin(PNAME_SYM);return new Symbol(Token.PREFIX);
          }
        case 147: break;
        case 68: 
          { return new Symbol(Token.FILTER);
          }
        case 148: break;
        case 69: 
          { yybegin(TYPE_SYM);return new Symbol(Token.STRING_LITERAL_LONG2, yytext());
          }
        case 149: break;
        case 70: 
          { return new Symbol(Token.REDUCED);
          }
        case 150: break;
        case 71: 
          { return new Symbol(Token.ISBLANK);
          }
        case 151: break;
        case 72: 
          { return new Symbol(Token.DESCRIBE);
          }
        case 152: break;
        case 73: 
          { return new Symbol(Token.DATATYPE);
          }
        case 153: break;
        case 74: 
          { return new Symbol(Token.DISTINCT);
          }
        case 154: break;
        case 75: 
          { return new Symbol(Token.ORDER_BY);
          }
        case 155: break;
        case 76: 
          { return new Symbol(Token.OPTIONAL);
          }
        case 156: break;
        case 77: 
          { return new Symbol(Token.SAMETERM);
          }
        case 157: break;
        case 78: 
          { return new Symbol(Token.CONSTRUCT);
          }
        case 158: break;
        case 79: 
          { return new Symbol(Token.ISLITERAL);
          }
        case 159: break;
        case 80: 
          { return new Symbol(Token.LANGMATCHES);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new Symbol(Token.END);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
