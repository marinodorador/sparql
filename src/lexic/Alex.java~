/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package lexic;
import static lexic.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>SparqlFlex.flex</tt>
 */
class Alex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\31\1\14\1\15\1\15\1\14\22\2\1\30\1\0\1\24"+
    "\1\0\1\7\2\0\1\22\1\26\1\27\1\0\1\20\1\0\1\12"+
    "\1\17\1\0\1\13\11\13\1\4\1\35\1\1\1\35\1\3\1\6"+
    "\1\10\1\40\1\34\1\47\1\60\1\21\1\54\1\43\1\50\1\62"+
    "\1\11\1\70\1\37\1\44\1\42\1\57\1\65\1\11\1\56\1\51"+
    "\1\46\1\61\1\11\1\67\1\66\1\64\1\11\1\32\1\23\1\33"+
    "\1\36\1\5\1\36\1\40\1\25\1\47\1\60\1\21\1\53\1\43"+
    "\1\50\1\62\1\11\1\70\1\37\1\44\1\41\1\57\1\65\1\11"+
    "\1\55\1\51\1\45\1\61\1\11\1\67\1\66\1\64\1\11\3\36"+
    "\7\35\1\16\61\35\1\35\10\35\27\35\1\35\37\35\1\35\70\35"+
    "\2\63\115\35\1\52\u0180\35\160\35\16\35\1\35\u1c81\35\16\35\32\35"+
    "\1\16\1\16\25\35\2\35\57\35\272\35\1\71\145\35\u0a70\35\u03f0\35"+
    "\21\35\ua7ff\35\u1800\35\u0900\0\u04d0\35\40\0\u020e\35\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\2\1\1\1\2\1\3\2\2\2\1"+
    "\1\2\1\1\1\2\1\1\1\2\1\1\2\2\1\4"+
    "\14\2\1\5\1\0\1\6\1\7\1\10\1\6\1\11"+
    "\1\5\2\0\1\10\1\5\2\0\1\12\1\10\1\0"+
    "\1\10\1\13\1\0\1\14\1\0\1\6\1\0\1\15"+
    "\1\0\1\5\1\16\4\5\1\0\1\17\1\0\1\11"+
    "\3\0\1\5\1\20\1\0\3\21\1\0\1\5\1\0"+
    "\1\22\2\6\1\0\1\23\1\0\1\6\1\24\27\6"+
    "\2\7\1\10\1\12\2\0\1\7\1\11\5\0\1\25"+
    "\3\0\1\26\3\27\1\5\2\11\2\0\3\30\2\31"+
    "\1\20\1\32\1\0\2\22\2\6\1\24\2\6\1\33"+
    "\5\6\1\34\21\6\10\0\2\35\2\0\1\6\1\36"+
    "\7\0\1\22\1\37\1\6\1\40\2\6\1\41\4\6"+
    "\1\42\17\6\1\43\1\44\5\0\1\22\1\45\1\6"+
    "\1\46\1\47\3\6\1\50\2\6\1\51\7\6\1\52"+
    "\1\6\1\53\1\54\1\6\1\55\1\0\1\56\1\0"+
    "\2\6\1\57\2\6\1\60\1\6\1\61\6\6\1\62"+
    "\1\63\4\6\1\64\10\6\1\65\1\6\1\66\1\67"+
    "\1\70\1\71\1\72\2\6\1\73\1\6\1\74\1\6"+
    "\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\72\0\u07ee\0\u027e\0\u027e\0\u0828"+
    "\0\u0862\0\u089c\0\164\0\u08d6\0\u0910\0\350\0\256\0\u094a"+
    "\0\u0984\0\u09be\0\u09be\0\u09f8\0\u0a32\0\u015c\0\u0a6c\0\u0196"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0244\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0984\0\u0f2e\0\u027e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u0f2e"+
    "\0\u10fe\0\u1138\0\u027e\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u0f2e\0\u09be\0\u16a8\0\u16a8\0\u16e2\0\u171c"+
    "\0\u089c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u0b1a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u0cea\0\u1b6a\0\u1ba4\0\u0d98"+
    "\0\u0dd2\0\u0f2e\0\u1bde\0\u1c18\0\u0f68\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u0f2e\0\u1d00\0\u1d3a\0\u027e\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u027e\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u18b2"+
    "\0\u2358\0\u2392\0\u23cc\0\u1abc\0\u1af6\0\u2406\0\u2440\0\u1bde"+
    "\0\u247a\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u1c52\0\u2562\0\u259c"+
    "\0\u25d6\0\u027e\0\u2610\0\u264a\0\u2684\0\u26be\0\u027e\0\u26f8"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u23cc\0\u2440\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u027e\0\u2cdc\0\u027e\0\u027e\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u027e\0\u2dc4\0\u2dfe\0\u027e\0\u2e38\0\u2e72"+
    "\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u027e\0\u2fce\0\u027e"+
    "\0\u027e\0\u3008\0\u027e\0\u3042\0\u0f2e\0\u307c\0\u30b6\0\u30f0"+
    "\0\u027e\0\u312a\0\u3164\0\u027e\0\u319e\0\u027e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u027e\0\u0f2e\0\u3334\0\u336e"+
    "\0\u33a8\0\u33e2\0\u027e\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u027e\0\u35ec\0\u027e\0\u027e\0\u027e"+
    "\0\u027e\0\u027e\0\u3626\0\u3660\0\u027e\0\u369a\0\u027e\0\u36d4"+
    "\0\u027e\0\u027e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\4\1\12\1\13\2\0\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\4"+
    "\1\2\1\25\1\4\1\23\2\4\1\26\1\27\2\4"+
    "\1\30\1\4\2\31\1\32\1\4\2\33\2\34\2\35"+
    "\1\36\1\37\1\40\2\41\1\4\1\42\1\4\1\43"+
    "\2\4\13\0\1\44\56\0\1\45\1\46\1\0\1\47"+
    "\1\50\2\51\1\45\2\51\1\52\1\53\2\0\1\51"+
    "\1\54\1\45\1\51\1\55\1\51\1\0\1\51\2\45"+
    "\1\46\1\0\2\46\2\51\1\46\33\51\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\57"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\40\46\1\0\1\62\1\0"+
    "\1\62\1\63\2\62\1\0\2\62\1\52\1\62\2\0"+
    "\1\62\1\60\1\0\1\62\1\64\1\62\1\0\1\62"+
    "\2\0\1\62\1\0\40\62\1\0\1\46\1\0\1\46"+
    "\1\65\2\46\1\0\2\46\1\52\1\57\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\40\46\1\0\1\66\1\0\1\66\1\56"+
    "\2\66\1\0\2\66\1\52\1\66\2\0\1\66\1\60"+
    "\1\0\1\66\1\67\1\66\1\0\1\66\2\0\1\66"+
    "\1\0\40\66\1\0\1\70\1\0\4\70\1\0\2\70"+
    "\1\0\1\70\2\0\1\70\2\0\1\70\1\71\1\70"+
    "\1\0\1\70\2\0\1\70\1\0\40\70\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\1\46\1\72\1\52"+
    "\1\57\2\0\1\46\1\60\1\0\1\72\1\61\1\46"+
    "\1\0\1\72\2\0\1\46\1\0\2\46\1\72\2\46"+
    "\13\72\1\46\10\72\1\46\5\72\1\46\13\73\1\74"+
    "\3\0\1\75\52\73\1\44\1\57\1\44\1\57\1\56"+
    "\2\57\1\44\2\57\1\76\1\77\2\0\1\46\1\100"+
    "\1\44\1\101\1\102\1\57\1\44\1\57\2\44\1\57"+
    "\1\44\40\57\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\40\46\13\0\1\103\56\0\13\104\1\105\3\0\1\106"+
    "\52\104\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\107\1\57\2\0\1\46\1\60\1\110\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\40\46"+
    "\5\111\1\112\5\111\1\113\1\0\5\111\1\114\1\115"+
    "\46\111\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\57\2\0\1\46\1\60\1\0\1\46"+
    "\1\116\1\46\1\117\1\120\2\0\1\46\1\0\7\46"+
    "\1\120\3\46\1\120\5\46\1\120\1\46\1\120\14\46"+
    "\13\121\1\122\1\0\5\121\1\0\1\123\1\124\45\121"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\57\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\6\46\1\125"+
    "\16\46\1\126\12\46\13\0\1\44\1\127\12\0\1\130"+
    "\2\127\41\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\57\1\131\1\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\132\1\131"+
    "\1\46\1\133\36\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\57\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\6\46\1\134\21\46\2\135\6\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\57"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\17\46\2\136\17\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\57\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\23\46\2\137\13\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\57\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\23\46\2\140"+
    "\13\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\57\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\25\46"+
    "\1\141\12\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\57\2\0\1\46\1\60\1\0"+
    "\1\142\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\6\46\1\143\4\46\2\144\23\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\57\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\6\46\1\145\14\46\2\146\3\46"+
    "\2\147\6\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\57\2\0\1\46\1\60\1\0"+
    "\1\150\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\40\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\57\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\21\46"+
    "\2\151\2\152\6\46\1\153\4\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\57\2\0"+
    "\1\46\1\60\1\0\1\154\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\6\46\1\155\21\46\2\156\6\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\57\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\7\46\2\157"+
    "\27\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\57\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\17\46"+
    "\2\160\17\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\57\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\23\46\2\161\13\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\57\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\16\46\1\162\21\46\1\45\2\0\1\163\6\45"+
    "\1\0\1\45\2\0\6\45\1\0\3\45\4\0\2\45"+
    "\1\0\34\45\1\62\1\0\1\164\1\165\2\166\1\45"+
    "\2\166\1\52\1\166\2\0\1\166\1\54\1\45\1\166"+
    "\1\167\1\166\1\0\1\166\2\45\1\62\1\0\2\62"+
    "\2\166\1\62\33\166\1\45\1\46\1\0\1\47\1\50"+
    "\2\51\1\45\2\51\1\52\1\51\2\0\1\51\1\54"+
    "\1\45\1\51\1\55\1\51\1\0\1\51\2\45\1\46"+
    "\1\0\2\46\2\51\1\46\33\51\1\0\1\52\1\0"+
    "\1\52\1\56\2\52\1\0\4\52\2\0\1\52\1\60"+
    "\1\0\1\52\1\170\1\52\1\0\1\52\2\0\1\52"+
    "\1\0\40\52\1\45\1\52\1\0\1\171\3\172\1\45"+
    "\2\172\1\52\1\172\2\0\1\172\1\54\1\45\1\172"+
    "\1\173\1\172\1\0\1\172\2\45\1\52\1\0\2\52"+
    "\2\172\1\52\33\172\1\45\2\0\1\163\1\45\1\174"+
    "\4\45\1\0\1\45\2\0\6\45\1\0\3\45\4\0"+
    "\2\45\1\0\33\45\1\0\1\52\1\0\4\52\1\0"+
    "\4\52\2\0\1\52\1\60\1\0\1\52\1\170\1\52"+
    "\1\0\1\52\2\0\1\52\1\0\40\52\5\0\1\175"+
    "\65\0\1\62\1\0\1\62\1\63\2\62\1\0\4\62"+
    "\2\0\1\62\1\176\1\0\1\62\1\64\1\62\1\0"+
    "\1\62\2\0\1\62\1\0\40\62\5\0\1\177\65\0"+
    "\1\200\1\0\4\200\1\0\2\200\1\52\1\200\2\0"+
    "\1\200\1\60\1\0\1\200\1\201\1\200\1\0\1\200"+
    "\2\0\1\200\1\0\40\200\5\0\1\202\71\0\1\203"+
    "\65\0\1\46\1\0\1\46\1\56\2\46\1\0\1\46"+
    "\1\72\1\204\1\46\2\0\1\46\1\60\1\0\1\72"+
    "\1\61\1\46\1\0\1\72\2\0\1\46\1\0\2\46"+
    "\1\72\2\46\13\72\1\46\10\72\1\46\5\72\1\46"+
    "\13\0\1\205\56\0\13\205\1\74\3\0\1\206\1\205"+
    "\1\207\50\205\13\0\1\206\57\0\1\52\1\0\1\52"+
    "\1\56\2\52\1\0\3\52\1\76\2\0\1\52\1\60"+
    "\1\0\1\52\1\170\1\52\1\0\1\52\2\0\1\52"+
    "\1\0\40\52\1\0\1\52\1\0\4\52\1\0\3\52"+
    "\1\210\2\0\1\52\1\60\1\0\1\211\1\170\1\52"+
    "\1\0\1\52\2\0\1\52\1\0\40\52\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\212\1\57"+
    "\2\0\1\46\1\60\1\213\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\40\46\5\0\1\175\5\0"+
    "\1\44\71\0\1\103\5\0\1\214\63\0\1\215\56\0"+
    "\13\215\1\105\3\0\1\216\1\215\1\217\50\215\13\0"+
    "\1\216\57\0\1\52\1\0\1\52\1\56\2\52\1\0"+
    "\3\52\1\220\2\0\1\52\1\60\1\0\1\52\1\170"+
    "\1\52\1\0\1\52\2\0\1\52\1\0\40\52\13\0"+
    "\1\221\56\0\14\111\1\0\5\111\1\222\1\115\62\111"+
    "\1\0\5\111\1\223\1\115\61\111\1\113\1\0\5\111"+
    "\1\222\1\115\46\111\22\0\1\224\71\0\1\111\1\0"+
    "\2\111\13\0\1\111\3\0\1\111\5\0\1\111\1\0"+
    "\1\111\106\0\14\121\1\0\5\121\1\0\1\123\1\225"+
    "\60\121\1\122\1\0\5\121\1\0\1\123\1\225\45\121"+
    "\22\0\1\121\1\0\2\121\13\0\1\121\3\0\1\121"+
    "\5\0\1\121\1\0\1\121\14\0\14\121\1\0\5\121"+
    "\1\0\1\123\1\226\45\121\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\17\46\2\227\17\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\27\46\1\230\10\46\14\0\1\127"+
    "\12\0\1\130\2\127\54\0\1\131\13\0\2\131\1\0"+
    "\1\231\37\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\1\131\1\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\132\1\131"+
    "\1\46\1\133\36\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\7\46\2\232\27\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\12\46\1\233\25\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\36\46\2\234\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\6\46\1\235\31\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\27\46\1\236\10\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\7\46\2\237\27\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\5\46\1\240"+
    "\32\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\12\46"+
    "\1\241\25\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\23\46\2\242\13\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\5\46\1\243\32\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\25\46\1\244\12\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\5\46\1\245\32\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\11\46\1\246\14\46\1\247"+
    "\11\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\21\46"+
    "\2\250\15\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\26\46\1\251\11\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\13\46\2\252\23\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\17\46\2\253\17\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\13\46\2\254\23\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\17\46\2\255\17\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\30\46\2\256\6\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\5\46\1\257"+
    "\21\46\1\260\2\261\6\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\262\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\40\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\263\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\40\46\1\45\1\62\1\0\1\164\1\165\2\166"+
    "\1\45\2\166\1\62\1\166\2\0\1\166\1\264\1\45"+
    "\1\166\1\167\1\166\1\0\1\166\2\45\1\62\1\0"+
    "\2\62\2\166\1\62\33\166\1\45\2\0\1\163\1\45"+
    "\1\265\4\45\1\0\1\45\2\0\6\45\1\0\3\45"+
    "\4\0\2\45\1\0\33\45\5\0\1\266\64\0\1\45"+
    "\1\52\1\0\1\171\1\50\2\172\1\45\2\172\1\52"+
    "\1\172\2\0\1\172\1\54\1\45\1\172\1\173\1\172"+
    "\1\0\1\172\2\45\1\52\1\0\2\52\2\172\1\52"+
    "\33\172\1\45\2\0\1\163\1\45\1\267\4\45\1\0"+
    "\1\45\2\0\6\45\1\0\3\45\4\0\2\45\1\0"+
    "\34\45\2\0\1\163\6\45\1\0\1\45\2\0\4\45"+
    "\1\51\1\45\1\0\3\45\4\0\2\45\1\0\33\45"+
    "\22\0\1\46\50\0\1\62\1\0\4\62\1\0\4\62"+
    "\2\0\1\62\1\176\1\0\1\62\1\64\1\62\1\0"+
    "\1\62\2\0\1\62\1\0\40\62\22\0\1\62\50\0"+
    "\1\200\1\0\4\200\1\0\4\200\2\0\1\200\1\270"+
    "\1\0\1\200\1\201\1\200\1\0\1\200\2\0\1\200"+
    "\1\0\40\200\5\0\1\271\106\0\1\66\71\0\1\70"+
    "\50\0\1\52\1\0\1\52\1\56\2\52\1\0\1\52"+
    "\1\204\1\52\1\204\2\0\1\52\1\60\1\0\1\204"+
    "\1\170\1\52\1\0\1\204\2\0\1\52\1\0\2\52"+
    "\1\204\2\52\13\204\1\52\10\204\1\52\5\204\1\52"+
    "\13\0\1\206\5\0\1\272\62\0\1\273\1\205\4\0"+
    "\1\273\52\0\1\52\1\0\1\52\1\56\2\52\1\0"+
    "\3\52\1\210\2\0\1\52\1\60\1\0\1\211\1\170"+
    "\1\52\1\0\1\52\2\0\1\52\1\0\40\52\1\0"+
    "\1\52\1\0\1\52\1\56\2\52\1\0\2\52\1\212"+
    "\1\274\2\0\1\52\1\60\1\213\1\52\1\170\1\52"+
    "\1\0\1\52\2\0\1\52\1\0\40\52\1\0\1\52"+
    "\1\0\1\52\1\56\2\52\1\0\3\52\1\274\2\0"+
    "\1\52\1\60\1\0\1\52\1\170\1\52\1\0\1\52"+
    "\2\0\1\52\1\0\40\52\13\0\1\275\70\0\1\213"+
    "\1\275\4\0\1\213\64\0\1\216\5\0\1\276\62\0"+
    "\1\277\1\215\4\0\1\277\52\0\1\300\1\0\4\300"+
    "\1\0\2\300\1\301\1\300\2\0\1\300\1\302\1\0"+
    "\1\300\1\303\1\300\1\0\1\300\2\0\1\300\1\0"+
    "\40\300\22\224\1\304\1\305\46\224\14\306\1\307\5\306"+
    "\1\307\1\310\1\311\45\306\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\312\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\40\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\7\46\2\313\27\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\11\46\1\314\26\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\30\46\2\315\6\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\33\46\1\316\4\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\317\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\40\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\17\46\2\320\17\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\321\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\40\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\322\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\40\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\17\46\2\323\17\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\12\46\1\324\25\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\13\46\2\325\23\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\326\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\40\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\27\46\1\327\10\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\17\46\2\330"+
    "\17\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\331"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\40\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\30\46\2\332"+
    "\6\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\15\46"+
    "\1\333\22\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\6\46\1\334\31\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\13\46\2\335\23\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\25\46\1\336\12\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\30\46\2\337\6\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\23\46\2\340\13\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\23\46\2\341\13\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\21\46\2\342"+
    "\15\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\23\46"+
    "\2\343\13\46\1\45\1\62\1\0\1\164\3\166\1\45"+
    "\2\166\1\62\1\166\2\0\1\166\1\264\1\45\1\166"+
    "\1\167\1\166\1\0\1\166\2\45\1\62\1\0\2\62"+
    "\2\166\1\62\33\166\1\45\2\0\1\163\6\45\1\0"+
    "\1\45\2\0\4\45\1\166\1\45\1\0\3\45\4\0"+
    "\2\45\1\0\33\45\22\0\1\52\47\0\1\45\2\0"+
    "\1\163\6\45\1\0\1\45\2\0\4\45\1\172\1\45"+
    "\1\0\3\45\4\0\2\45\1\0\33\45\22\0\1\200"+
    "\61\0\1\273\1\344\4\0\1\273\64\0\1\344\70\0"+
    "\1\277\1\345\4\0\1\277\64\0\1\345\57\0\1\301"+
    "\1\0\4\301\1\0\4\301\2\0\1\301\1\302\1\0"+
    "\1\301\1\346\1\301\1\0\1\301\2\0\1\301\1\0"+
    "\40\301\5\0\1\347\64\0\22\224\1\350\1\305\46\224"+
    "\22\0\1\224\1\0\2\224\13\0\1\224\3\0\1\224"+
    "\5\0\1\224\1\0\1\224\14\0\23\307\1\351\1\352"+
    "\45\307\22\0\1\306\1\0\2\306\13\0\1\306\3\0"+
    "\1\306\5\0\1\306\1\0\1\306\14\0\14\306\1\307"+
    "\5\306\1\307\1\310\1\353\45\306\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\26\46\1\354\11\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\12\46\1\355\25\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\13\46\2\356\23\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\16\46\1\357"+
    "\21\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\13\46"+
    "\2\360\23\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\15\46\1\361\22\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\13\46\2\362\23\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\363\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\40\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\364"+
    "\1\0\40\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\365\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\40\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\34\46"+
    "\1\366\3\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\15\46\1\367\22\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\370\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\40\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\23\46\2\371\13\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\25\46\1\372\12\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\23\46\2\373\13\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\13\46\2\374\23\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\30\46\2\375\6\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\7\46\2\376\27\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\13\46\2\377"+
    "\23\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\30\46"+
    "\2\u0100\6\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\30\46\2\u0101\6\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\30\46\2\u0102\6\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\u0103\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\40\46\5\0\1\u0104\106\0\1\300\47\0"+
    "\22\224\1\u0105\1\305\46\224\22\0\1\307\1\0\2\307"+
    "\13\0\1\307\3\0\1\307\5\0\1\307\1\0\1\307"+
    "\14\0\23\307\1\351\1\u0106\45\307\14\306\1\307\5\306"+
    "\1\307\1\310\1\225\45\306\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\6\46\1\u0107\31\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\23\46\2\u0108\13\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\13\46\2\u0109\23\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\u010a\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\40\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\7\46\2\u010b\27\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\23\46\2\u010c\13\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\u010d\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\40\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\13\46\2\u010e\23\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\u010f\1\0\40\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\7\46\2\u0110\27\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\30\46\2\u0111"+
    "\6\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\32\46"+
    "\1\u0112\5\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\7\46\2\u0113\27\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\u0114\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\40\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\34\46\1\u0115\3\46\22\0\1\301\47\0\23\307\1\351"+
    "\1\u0116\45\307\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\13\46\2\u0117\23\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\27\46\1\u0118\10\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\23\46\2\u0119\13\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\6\46\1\u011a\31\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\26\46\1\u011b\11\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\u011c\2\0\1\46\1\0\2\46\1\u011c\35\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\6\46\1\u011d"+
    "\31\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\u011e\2\0\1\46\1\0\2\46"+
    "\1\u011e\35\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\33\46\1\u011f\4\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\15\46\1\u0120\22\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\23\46\2\u0121\13\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\15\46\1\u0122\22\46\1\0\1\46"+
    "\1\0\1\46\1\56\2\46\1\0\2\46\1\52\1\46"+
    "\2\0\1\46\1\60\1\0\1\46\1\61\1\46\1\0"+
    "\1\46\2\0\1\46\1\0\15\46\1\u0123\22\46\1\0"+
    "\1\46\1\0\1\46\1\56\2\46\1\0\2\46\1\52"+
    "\1\46\2\0\1\46\1\60\1\0\1\46\1\61\1\46"+
    "\1\0\1\46\2\0\1\46\1\0\12\46\1\u0124\25\46"+
    "\1\0\1\46\1\0\1\46\1\56\2\46\1\0\2\46"+
    "\1\52\1\46\2\0\1\46\1\60\1\0\1\46\1\61"+
    "\1\46\1\0\1\46\2\0\1\46\1\0\12\46\1\u0125"+
    "\25\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\32\46"+
    "\1\u0126\5\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\5\46\1\u0127\32\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\u0128\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\40\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\u0129\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\40\46\1\0\1\46\1\0\1\46\1\56\2\46\1\0"+
    "\2\46\1\52\1\46\2\0\1\46\1\60\1\0\1\46"+
    "\1\61\1\46\1\0\1\46\2\0\1\46\1\0\13\46"+
    "\2\u012a\23\46\1\0\1\46\1\0\1\46\1\56\2\46"+
    "\1\0\2\46\1\52\1\46\2\0\1\46\1\60\1\0"+
    "\1\46\1\61\1\46\1\0\1\46\2\0\1\46\1\0"+
    "\6\46\1\u012b\31\46\1\0\1\46\1\0\1\46\1\56"+
    "\2\46\1\0\2\46\1\52\1\46\2\0\1\46\1\60"+
    "\1\0\1\46\1\61\1\46\1\0\1\46\2\0\1\46"+
    "\1\0\16\46\1\u012c\21\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\13\46\2\u012d\23\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\u012e\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\40\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\5\46\1\u012f\32\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\u0130\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\40\46\1\0\1\46\1\0\1\46"+
    "\1\56\2\46\1\0\2\46\1\52\1\46\2\0\1\46"+
    "\1\60\1\0\1\46\1\61\1\46\1\0\1\46\2\0"+
    "\1\46\1\0\26\46\1\u0131\11\46\1\0\1\46\1\0"+
    "\1\46\1\56\2\46\1\0\2\46\1\52\1\46\2\0"+
    "\1\46\1\60\1\0\1\46\1\61\1\46\1\0\1\46"+
    "\2\0\1\46\1\0\17\46\2\u0132\17\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\43\1\1\0\6\1\2\0\2\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\6\1\1\0\1\1\1\0\1\1\3\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\11\1\0\31\1\1\11\3\1\2\0\2\1"+
    "\5\0\1\1\3\0\7\1\2\0\5\1\1\11\1\1"+
    "\1\0\4\1\1\11\32\1\10\0\2\1\2\0\2\1"+
    "\7\0\35\1\5\0\31\1\1\0\1\11\1\0\17\1"+
    "\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public StringBuffer lexeme = new StringBuffer();;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(Token.ERROR, yytext());
          }
        case 63: break;
        case 2: 
          { return new Symbol(Token.PN_CHARS_BASE, yytext());
          }
        case 64: break;
        case 3: 
          { return new Symbol(Token.PN_CHARS, yytext());
          }
        case 65: break;
        case 4: 
          { return new Symbol(Token.A);
          }
        case 66: break;
        case 5: 
          { return new Symbol(Token.DECIMAL, yytext());
          }
        case 67: break;
        case 6: 
          { return new Symbol(Token.VARNAME, yytext());
          }
        case 68: break;
        case 7: 
          { return new Symbol(Token.IRI_REF, yytext());
          }
        case 69: break;
        case 8: 
          { return new Symbol(Token.PNAME_NS, yytext());
          }
        case 70: break;
        case 9: 
          { return new Symbol(Token.PN_PREFIX, yytext());
          }
        case 71: break;
        case 10: 
          { return new Symbol(Token.PNAME_LN, yytext());
          }
        case 72: break;
        case 11: 
          { return new Symbol(Token.VAR1, yytext());
          }
        case 73: break;
        case 12: 
          { return new Symbol(Token.VAR2, yytext());
          }
        case 74: break;
        case 13: 
          { return new Symbol(Token.INTEGER_NEGATIVE, yytext());
          }
        case 75: break;
        case 14: 
          { return new Symbol(Token.INTEGER, yytext());
          }
        case 76: break;
        case 15: 
          { return new Symbol(Token.INTEGER_POSITIVE, yytext());
          }
        case 77: break;
        case 16: 
          { return new Symbol(Token.STRING_LITERAL1, yytext());
          }
        case 78: break;
        case 17: 
          { return new Symbol(Token.ECHAR, yytext());
          }
        case 79: break;
        case 18: 
          { return new Symbol(Token.STRING_LITERAL2, yytext());
          }
        case 80: break;
        case 19: 
          { return new Symbol(Token.NIL, yytext());
          }
        case 81: break;
        case 20: 
          { return new Symbol(Token.ANON, yytext());
          }
        case 82: break;
        case 21: 
          { return new Symbol(Token.BLANK_NODE_LABEL, yytext());
          }
        case 83: break;
        case 22: 
          { return new Symbol(Token.LANGTAG, yytext());
          }
        case 84: break;
        case 23: 
          { return new Symbol(Token.DECIMAL_NEGATIVE, yytext());
          }
        case 85: break;
        case 24: 
          { return new Symbol(Token.DECIMAL_POSITIVE, yytext());
          }
        case 86: break;
        case 25: 
          { return new Symbol(Token.EXPONENT, yytext());
          }
        case 87: break;
        case 26: 
          { return new Symbol(Token.PN_CHARS_U, yytext());
          }
        case 88: break;
        case 27: 
          { return new Symbol(Token.ASK);
          }
        case 89: break;
        case 28: 
          { return new Symbol(Token.STR);
          }
        case 90: break;
        case 29: 
          { return new Symbol(Token.DOUBLE, yytext());
          }
        case 91: break;
        case 30: 
          { return new Symbol(Token.PN_LOCAL, yytext());
          }
        case 92: break;
        case 31: 
          { return new Symbol(Token.BASE);
          }
        case 93: break;
        case 32: 
          { return new Symbol(Token.LANG);
          }
        case 94: break;
        case 33: 
          { return new Symbol(Token.TRUE);
          }
        case 95: break;
        case 34: 
          { return new Symbol(Token.FROM);
          }
        case 96: break;
        case 35: 
          { return new Symbol(Token.DOUBLE_NEGATIVE, yytext());
          }
        case 97: break;
        case 36: 
          { return new Symbol(Token.DOUBLE_POSITIVE, yytext());
          }
        case 98: break;
        case 37: 
          { return new Symbol(Token.BOUND);
          }
        case 99: break;
        case 38: 
          { return new Symbol(Token.LIMIT);
          }
        case 100: break;
        case 39: 
          { return new Symbol(Token.GRAPH);
          }
        case 101: break;
        case 40: 
          { return new Symbol(Token.FALSE);
          }
        case 102: break;
        case 41: 
          { return new Symbol(Token.REGEX);
          }
        case 103: break;
        case 42: 
          { return new Symbol(Token.UNION);
          }
        case 104: break;
        case 43: 
          { return new Symbol(Token.ISURI);
          }
        case 105: break;
        case 44: 
          { return new Symbol(Token.ISIRI);
          }
        case 106: break;
        case 45: 
          { return new Symbol(Token.WHERE);
          }
        case 107: break;
        case 46: 
          { return new Symbol(Token.STRING_LITERAL_LONG1, yytext());
          }
        case 108: break;
        case 47: 
          { return new Symbol(Token.SELECT);
          }
        case 109: break;
        case 48: 
          { return new Symbol(Token.FILTER);
          }
        case 110: break;
        case 49: 
          { return new Symbol(Token.OFFSET);
          }
        case 111: break;
        case 50: 
          { return new Symbol(Token.PREFIX);
          }
        case 112: break;
        case 51: 
          { return new Symbol(Token.STRING_LITERAL_LONG2, yytext());
          }
        case 113: break;
        case 52: 
          { return new Symbol(Token.REDUCED);
          }
        case 114: break;
        case 53: 
          { return new Symbol(Token.SAMETERM);
          }
        case 115: break;
        case 54: 
          { return new Symbol(Token.ORDER_BY);
          }
        case 116: break;
        case 55: 
          { return new Symbol(Token.OPTIONAL);
          }
        case 117: break;
        case 56: 
          { return new Symbol(Token.DESCRIBE);
          }
        case 118: break;
        case 57: 
          { return new Symbol(Token.DATATYPE);
          }
        case 119: break;
        case 58: 
          { return new Symbol(Token.DISTINCT);
          }
        case 120: break;
        case 59: 
          { return new Symbol(Token.CONSTRUCT);
          }
        case 121: break;
        case 60: 
          { return new Symbol(Token.ISLITERAL);
          }
        case 122: break;
        case 61: 
          { return new Symbol(Token.FROM_NAMED);
          }
        case 123: break;
        case 62: 
          { return new Symbol(Token.LANGMATCHES);
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
